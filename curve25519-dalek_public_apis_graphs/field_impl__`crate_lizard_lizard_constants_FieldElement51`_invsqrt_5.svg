<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="2619pt" height="4904pt"
 viewBox="0.00 0.00 2619.00 4904.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 4900)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-4900 2615,-4900 2615,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2522,-3868 2522,-3943 2603,-3943 2603,-3868 2522,-3868"/>
<text text-anchor="middle" x="2562.5" y="-3927.8" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2371,-4349 2371,-4424 2502,-4424 2502,-4349 2371,-4349"/>
<text text-anchor="middle" x="2436.5" y="-4408.8" font-family="Helvetica,sans-Serif" font-size="14.00">jacobi_quartic.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1671,-4511 1671,-4640 2351,-4640 2351,-4511 1671,-4511"/>
<text text-anchor="middle" x="2011" y="-4624.8" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_ristretto.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2187.5,-3561 2187.5,-3690 2475.5,-3690 2475.5,-3561 2187.5,-3561"/>
<text text-anchor="middle" x="2331.5" y="-3674.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="1287.5,-2695 1287.5,-2932 1500.5,-2932 1500.5,-2695 1287.5,-2695"/>
<text text-anchor="middle" x="1394" y="-2916.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="138,-766 138,-2191 734,-2191 734,-766 138,-766"/>
<text text-anchor="middle" x="436" y="-2175.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="341,-2282 341,-2357 531,-2357 531,-2282 341,-2282"/>
<text text-anchor="middle" x="436" y="-2341.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="387,-2199 387,-2274 485,-2274 485,-2199 387,-2199"/>
<text text-anchor="middle" x="436" y="-2258.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="323,-2639 323,-2714 549,-2714 549,-2639 323,-2639"/>
<text text-anchor="middle" x="436" y="-2698.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="324.5,-2365 324.5,-2494 547.5,-2494 547.5,-2365 324.5,-2365"/>
<text text-anchor="middle" x="436" y="-2478.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="295,-3950 295,-4079 1003.5,-4079 1003.5,-3950 295,-3950"/>
<text text-anchor="middle" x="649.25" y="-4063.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="393,-3813 393,-3942 479,-3942 479,-3813 393,-3813"/>
<text text-anchor="middle" x="436" y="-3926.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="1328.5,-2452 1328.5,-2581 1817.5,-2581 1817.5,-2452 1328.5,-2452"/>
<text text-anchor="middle" x="1573" y="-2565.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="1645,-2589 1645,-2684 2303,-2684 2303,-2589 1645,-2589"/>
<text text-anchor="middle" x="1974" y="-2668.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="869,-4087 869,-4418 2058,-4418 2058,-4087 869,-4087"/>
<text text-anchor="middle" x="1463.5" y="-4402.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="390.5,-3140 390.5,-3269 1466,-3269 1466,-3140 390.5,-3140"/>
<text text-anchor="middle" x="928.25" y="-3253.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="1240.5,-2940 1240.5,-3123 1802.5,-3123 1802.5,-2940 1240.5,-2940"/>
<text text-anchor="middle" x="1521.5" y="-3107.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="903,-3867 903,-3942 1474,-3942 1474,-3867 903,-3867"/>
<text text-anchor="middle" x="1188.5" y="-3926.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="1288,-3277 1288,-3622 2106,-3622 2106,-3277 1288,-3277"/>
<text text-anchor="middle" x="1697" y="-3606.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="1698.5,-1035 1698.5,-1164 1793.5,-1164 1793.5,-1035 1698.5,-1035"/>
<text text-anchor="middle" x="1746" y="-1148.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="1709.5,-458 1709.5,-587 1781.5,-587 1781.5,-458 1709.5,-458"/>
<text text-anchor="middle" x="1745.5" y="-571.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1685,-699 1685,-828 1807,-828 1807,-699 1685,-699"/>
<text text-anchor="middle" x="1746" y="-812.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="0,-3358 0,-3433 118,-3433 118,-3358 0,-3358"/>
<text text-anchor="middle" x="59" y="-3417.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="283,-3331 283,-3460 589,-3460 589,-3331 283,-3331"/>
<text text-anchor="middle" x="436" y="-3444.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="856.5,-899 856.5,-1190 1494.5,-1190 1494.5,-899 856.5,-899"/>
<text text-anchor="middle" x="1175.5" y="-1174.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="287,-91 287,-382 1435,-382 1435,-91 287,-91"/>
<text text-anchor="middle" x="861" y="-366.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="876.5,-1198 876.5,-1435 1020.5,-1435 1020.5,-1198 876.5,-1198"/>
<text text-anchor="middle" x="948.5" y="-1419.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="873,-529 873,-766 1025,-766 1025,-529 873,-529"/>
<text text-anchor="middle" x="949" y="-750.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="891.5,-4426 891.5,-4501 1005.5,-4501 1005.5,-4426 891.5,-4426"/>
<text text-anchor="middle" x="948.5" y="-4485.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="865,-4676 865,-4805 1032,-4805 1032,-4676 865,-4676"/>
<text text-anchor="middle" x="948.5" y="-4789.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="789.5,-3277 789.5,-3730 1107.5,-3730 1107.5,-3277 789.5,-3277"/>
<text text-anchor="middle" x="948.5" y="-3714.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="754,-1511 754,-2126 1586.5,-2126 1586.5,-1511 754,-1511"/>
<text text-anchor="middle" x="1170.25" y="-2110.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="1339.5,-2202 1339.5,-2277 1449.5,-2277 1449.5,-2202 1339.5,-2202"/>
<text text-anchor="middle" x="1394.5" y="-2261.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="838,-4813 838,-4888 1437,-4888 1437,-4813 838,-4813"/>
<text text-anchor="middle" x="1137.5" y="-4872.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="1706.5,-1804 1706.5,-2365 1784.5,-2365 1784.5,-1804 1706.5,-1804"/>
<text text-anchor="middle" x="1745.5" y="-2349.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="883,-2315 883,-2444 1430,-2444 1430,-2315 883,-2315"/>
<text text-anchor="middle" x="1156.5" y="-2428.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="864.5,-4539 864.5,-4668 1437,-4668 1437,-4539 864.5,-4539"/>
<text text-anchor="middle" x="1150.75" y="-4652.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="1163,-458 1163,-749 1625,-749 1625,-458 1163,-458"/>
<text text-anchor="middle" x="1394" y="-733.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="294.5,-8 294.5,-83 577.5,-83 577.5,-8 294.5,-8"/>
<text text-anchor="middle" x="436" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="235,-521 235,-758 637,-758 637,-521 235,-521"/>
<text text-anchor="middle" x="436" y="-742.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="299.5,-3547 299.5,-3730 572.5,-3730 572.5,-3547 299.5,-3547"/>
<text text-anchor="middle" x="436" y="-3714.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="308.5,-2722 308.5,-2851 563.5,-2851 563.5,-2722 308.5,-2722"/>
<text text-anchor="middle" x="436" y="-2835.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="342,-2502 342,-2631 530,-2631 530,-2502 342,-2502"/>
<text text-anchor="middle" x="436" y="-2615.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn invsqrt(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FieldElement::sqrt_ratio_i(&amp;FieldElement::ONE, self) &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="2595,-3912 2530,-3912 2530,-3876 2595,-3876 2595,-3912"/>
<text text-anchor="middle" x="2562.5" y="-3890.3" font-family="Helvetica,sans-Serif" font-size="14.00">invsqrt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_inv(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut out = FieldElement::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Special case: s = 0. &#160;If s is zero, either t = 1 or t = &#45;1. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// If t=1, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2487,-4393 2386,-4393 2386,-4357 2487,-4357 2487,-4393"/>
<text text-anchor="middle" x="2436.5" y="-4371.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_inv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2442.58,-4356.75C2453.65,-4316.8 2480.7,-4218.61 2502,-4136 2521.9,-4058.82 2543.97,-3967.39 2554.79,-3922.2"/>
<polygon fill="gray" stroke="gray" points="2558.24,-3922.79 2557.16,-3912.25 2551.43,-3921.16 2558.24,-3922.79"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn elligator_ristretto_flavor_inverse(&amp;self) &#45;&gt; (u8, [FieldElement; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Elligator2 computes a Point from a FieldElement in two steps: first &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// it computes a (s,t) on the J...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2113,-4578 1874,-4578 1874,-4542 2113,-4542 2113,-4578"/>
<text text-anchor="middle" x="1993.5" y="-4556.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor_inverse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2049.45,-4578.02C2124.22,-4598.94 2259.2,-4623.51 2351,-4564 2406.33,-4528.13 2425.75,-4446.61 2432.32,-4403.29"/>
<polygon fill="gray" stroke="gray" points="2435.82,-4403.54 2433.72,-4393.15 2428.88,-4402.57 2435.82,-4403.54"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn to_jacobi_quartic_ristretto(self) &#45;&gt; [JacobiPoint; 4] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x2 = self.0.X.square(); // X^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y2 = self.0.Y.square(); // Y^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y4 = y2.square(); // Y^4 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let z2...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2343,-4555 2149,-4555 2149,-4519 2343,-4519 2343,-4555"/>
<text text-anchor="middle" x="2246" y="-4533.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_jacobi_quartic_ristretto</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2113.15,-4549.11C2121.78,-4548.31 2130.46,-4547.52 2139.01,-4546.73"/>
<polygon fill="gray" stroke="gray" points="2139.35,-4550.22 2148.99,-4545.82 2138.71,-4543.24 2139.35,-4550.22"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_decode&lt;D: Digest&gt;(&amp;self) &#45;&gt; Option&lt;[u8; 16]&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut result: [u8; 16] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1801,-4555 1690,-4555 1690,-4519 1801,-4519 1801,-4555"/>
<text text-anchor="middle" x="1745.5" y="-4533.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_decode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1801.1,-4542.1C1819.81,-4543.85 1841.63,-4545.89 1863.7,-4547.96"/>
<polygon fill="gray" stroke="gray" points="1863.57,-4551.46 1873.85,-4548.91 1864.22,-4544.49 1863.57,-4551.46"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub fn decode_253_bits(&amp;self) &#45;&gt; (u8, [[u8; 32]; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut ret = [[0u8; 32]; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (mask, fes) = self.elligator_ristretto_flavor_inverse(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1812,-4609 1679,-4609 1679,-4573 1812,-4573 1812,-4609"/>
<text text-anchor="middle" x="1745.5" y="-4587.3" font-family="Helvetica,sans-Serif" font-size="14.00">decode_253_bits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1812.1,-4582.73C1828.19,-4580.71 1845.97,-4578.46 1863.92,-4576.2"/>
<polygon fill="gray" stroke="gray" points="1864.41,-4579.67 1873.89,-4574.95 1863.53,-4572.72 1864.41,-4579.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2255.91,-4518.79C2300.01,-4428.62 2495.05,-4029.86 2548.12,-3921.35"/>
<polygon fill="gray" stroke="gray" points="2551.42,-3922.57 2552.67,-3912.05 2545.13,-3919.49 2551.42,-3922.57"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn compress(&amp;self) &#45;&gt; CompressedRistretto { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut X = self.0.X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut Y = self.0.Y; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = &amp;self.0.Z; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let T = &amp;self.0.T; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let u1 = &amp;(Z + &amp;Y) * &amp;(Z ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2287.5,-3659 2204.5,-3659 2204.5,-3623 2287.5,-3623 2287.5,-3659"/>
<text text-anchor="middle" x="2246" y="-3637.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2269.62,-3659.2C2325.15,-3703.87 2468.26,-3818.99 2531.12,-3869.56"/>
<polygon fill="gray" stroke="gray" points="2529.1,-3872.43 2539.09,-3875.97 2533.49,-3866.97 2529.1,-3872.43"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_2(s: FieldElement) &#45;&gt; (Choice, Choice, Choice, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Step 2. &#160;Compute (X:Y:Z:T). &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ss = s.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2467.5,-3634 2405.5,-3634 2405.5,-3598 2467.5,-3598 2467.5,-3634"/>
<text text-anchor="middle" x="2436.5" y="-3612.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2467.83,-3626.67C2480.1,-3632.41 2493.37,-3640.68 2502,-3652 2551.38,-3716.77 2560.31,-3817.15 2561.58,-3865.74"/>
<polygon fill="gray" stroke="gray" points="2558.08,-3865.9 2561.75,-3875.84 2565.08,-3865.78 2558.08,-3865.9"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!s_encoding_is_canonical | s_is_negative).into...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2296.5,-3605 2195.5,-3605 2195.5,-3569 2296.5,-3569 2296.5,-3605"/>
<text text-anchor="middle" x="2246" y="-3583.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2296.53,-3594.62C2327.32,-3599.36 2366.41,-3605.37 2395.29,-3609.81"/>
<polygon fill="gray" stroke="gray" points="2395.01,-3613.31 2405.43,-3611.37 2396.07,-3606.39 2395.01,-3613.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node10"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="1460.5,-2739 1327.5,-2739 1327.5,-2703 1460.5,-2703 1460.5,-2739"/>
<text text-anchor="middle" x="1394" y="-2717.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="1794.5,-2984 1696.5,-2984 1696.5,-2948 1794.5,-2948 1794.5,-2984"/>
<text text-anchor="middle" x="1745.5" y="-2962.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1460.73,-2713.41C1509.99,-2711.13 1576.91,-2715.58 1625,-2748 1692.38,-2793.42 1725.28,-2889.93 1737.98,-2937.83"/>
<polygon fill="blue" stroke="blue" points="1734.66,-2938.99 1740.52,-2947.82 1741.45,-2937.26 1734.66,-2938.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node11"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="1458.5,-2793 1329.5,-2793 1329.5,-2757 1458.5,-2757 1458.5,-2793"/>
<text text-anchor="middle" x="1394" y="-2771.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="1772.5,-3038 1718.5,-3038 1718.5,-3002 1772.5,-3002 1772.5,-3038"/>
<text text-anchor="middle" x="1745.5" y="-3016.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1458.59,-2763.01C1510.7,-2757.19 1582.55,-2759.02 1625,-2802 1654.99,-2832.37 1617.34,-2960.5 1645,-2993 1660.35,-3011.04 1686.42,-3017.64 1708.03,-3019.81"/>
<polygon fill="blue" stroke="blue" points="1707.98,-3023.32 1718.21,-3020.55 1708.49,-3016.34 1707.98,-3023.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node12"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="1458.5,-2847 1329.5,-2847 1329.5,-2811 1458.5,-2811 1458.5,-2847"/>
<text text-anchor="middle" x="1394" y="-2825.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;pub fn hash(&amp;self) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*Self::hash_from_scalars(&amp;self.scalars).compress().as_bytes() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1772.5,-3092 1718.5,-3092 1718.5,-3056 1772.5,-3056 1772.5,-3092"/>
<text text-anchor="middle" x="1745.5" y="-3070.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1458.59,-2817.01C1510.7,-2811.19 1582.55,-2813.02 1625,-2856 1654.99,-2886.37 1617.34,-3014.5 1645,-3047 1660.35,-3065.04 1686.42,-3071.64 1708.03,-3073.81"/>
<polygon fill="blue" stroke="blue" points="1707.98,-3077.32 1718.21,-3074.55 1708.49,-3070.34 1707.98,-3077.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node13"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="1492.5,-2901 1295.5,-2901 1295.5,-2865 1492.5,-2865 1492.5,-2901"/>
<text text-anchor="middle" x="1394" y="-2879.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1492.63,-2881.9C1538.86,-2886.65 1591.22,-2900.55 1625,-2936 1659.58,-2972.29 1611.12,-3010.05 1645,-3047 1660.9,-3064.35 1686.72,-3071 1708.07,-3073.36"/>
<polygon fill="blue" stroke="blue" points="1707.87,-3076.86 1718.13,-3074.21 1708.46,-3069.88 1707.87,-3076.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node14"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="634,-2160 238,-2160 238,-2124 634,-2124 634,-2160"/>
<text text-anchor="middle" x="436" y="-2138.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="975.5,-3699 921.5,-3699 921.5,-3663 975.5,-3663 975.5,-3699"/>
<text text-anchor="middle" x="948.5" y="-3677.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M634.33,-2139.11C672.56,-2148.11 708.57,-2165.06 734,-2195 786.47,-2256.79 700.37,-3593.21 754,-3654 792.64,-3697.8 866.85,-3694.89 911.29,-3688.29"/>
<polygon fill="blue" stroke="blue" points="912.06,-3691.72 921.37,-3686.66 910.94,-3684.81 912.06,-3691.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node15"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="624.5,-972 247.5,-972 247.5,-936 624.5,-936 624.5,-972"/>
<text text-anchor="middle" x="436" y="-950.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="975.5,-627 921.5,-627 921.5,-591 975.5,-591 975.5,-627"/>
<text text-anchor="middle" x="948.5" y="-605.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M516.31,-972.01C583.96,-982.22 678.79,-983.44 734,-927 779.33,-880.66 709.8,-683.41 754,-636 793.72,-593.39 867.23,-595.8 911.32,-602"/>
<polygon fill="blue" stroke="blue" points="910.9,-605.48 921.32,-603.54 911.97,-598.56 910.9,-605.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node16"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="647.5,-918 224.5,-918 224.5,-882 647.5,-882 647.5,-918"/>
<text text-anchor="middle" x="436" y="-896.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="981.5,-573 915.5,-573 915.5,-537 981.5,-537 981.5,-573"/>
<text text-anchor="middle" x="948.5" y="-551.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M516.31,-918.01C583.96,-928.22 678.79,-929.44 734,-873 779.33,-826.66 709.8,-629.41 754,-582 791.98,-541.26 860.85,-541.68 905.36,-547.21"/>
<polygon fill="blue" stroke="blue" points="904.9,-550.68 915.29,-548.58 905.86,-543.75 904.9,-550.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node17"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="595,-1026 277,-1026 277,-990 595,-990 595,-1026"/>
<text text-anchor="middle" x="436" y="-1004.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="976.5,-681 920.5,-681 920.5,-645 976.5,-645 976.5,-681"/>
<text text-anchor="middle" x="948.5" y="-659.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M516.31,-1026.01C583.96,-1036.22 678.79,-1037.44 734,-981 779.33,-934.66 709.8,-737.41 754,-690 793.4,-647.74 866.04,-649.76 910.24,-655.85"/>
<polygon fill="blue" stroke="blue" points="909.88,-659.34 920.29,-657.37 910.93,-652.42 909.88,-659.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node18"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="589,-1242 283,-1242 283,-1206 589,-1206 589,-1242"/>
<text text-anchor="middle" x="436" y="-1220.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="976.5,-1242 920.5,-1242 920.5,-1206 976.5,-1206 976.5,-1242"/>
<text text-anchor="middle" x="948.5" y="-1220.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M589.13,-1224C700.7,-1224 843.88,-1224 910.42,-1224"/>
<polygon fill="blue" stroke="blue" points="910.43,-1227.5 920.43,-1224 910.43,-1220.5 910.43,-1227.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node19"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="689,-1512 183,-1512 183,-1476 689,-1476 689,-1512"/>
<text text-anchor="middle" x="436" y="-1490.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="1089.5,-1609 807.5,-1609 807.5,-1573 1089.5,-1573 1089.5,-1609"/>
<text text-anchor="middle" x="948.5" y="-1587.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M689.02,-1497.53C704.95,-1503.54 720.13,-1511.24 734,-1521 751.24,-1533.13 737.06,-1551.46 754,-1564 766.98,-1573.61 781.83,-1580.57 797.4,-1585.55"/>
<polygon fill="blue" stroke="blue" points="796.6,-1588.96 807.18,-1588.4 798.56,-1582.24 796.6,-1588.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node20"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="697,-1890 175,-1890 175,-1854 697,-1854 697,-1890"/>
<text text-anchor="middle" x="436" y="-1868.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="1042,-3429 855,-3429 855,-3393 1042,-3393 1042,-3429"/>
<text text-anchor="middle" x="948.5" y="-3407.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.76,-1853.95C581.16,-1842.66 679.22,-1839.82 734,-1899 790.05,-1959.55 699.42,-3322.12 754,-3384 776.37,-3409.36 810.66,-3419.06 844.19,-3421.46"/>
<polygon fill="blue" stroke="blue" points="844.4,-3424.97 854.56,-3421.97 844.75,-3417.98 844.4,-3424.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;pub fn compress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: self.reserved, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="990,-3375 907,-3375 907,-3339 990,-3339 990,-3375"/>
<text text-anchor="middle" x="948.5" y="-3353.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.76,-1853.96C581.15,-1842.67 679.21,-1839.84 734,-1899 788.02,-1957.33 701.39,-3270.39 754,-3330 788.67,-3369.28 851.95,-3370.99 896.69,-3366.17"/>
<polygon fill="blue" stroke="blue" points="897.28,-3369.62 906.79,-3364.93 896.44,-3362.67 897.28,-3369.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node21"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="641,-1782 231,-1782 231,-1746 641,-1746 641,-1782"/>
<text text-anchor="middle" x="436" y="-1760.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="1091.5,-1879 805.5,-1879 805.5,-1843 1091.5,-1843 1091.5,-1879"/>
<text text-anchor="middle" x="948.5" y="-1857.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M641.09,-1754.47C674.28,-1760.54 706.69,-1771.79 734,-1791 751.24,-1803.13 737.06,-1821.46 754,-1834 766.41,-1843.19 780.53,-1849.96 795.36,-1854.88"/>
<polygon fill="blue" stroke="blue" points="794.6,-1858.31 805.19,-1857.86 796.63,-1851.61 794.6,-1858.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node22"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="642.5,-1620 229.5,-1620 229.5,-1584 642.5,-1584 642.5,-1620"/>
<text text-anchor="middle" x="436" y="-1598.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1039.5,-1717 857.5,-1717 857.5,-1681 1039.5,-1681 1039.5,-1717"/>
<text text-anchor="middle" x="948.5" y="-1695.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M642.63,-1592.75C675.29,-1598.89 707.11,-1610.08 734,-1629 751.24,-1641.13 737.06,-1659.46 754,-1672 780.56,-1691.66 814.93,-1700.26 847.32,-1703.38"/>
<polygon fill="blue" stroke="blue" points="847.05,-1706.87 857.29,-1704.18 847.61,-1699.89 847.05,-1706.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node23"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="615.5,-2106 256.5,-2106 256.5,-2070 615.5,-2070 615.5,-2106"/>
<text text-anchor="middle" x="436" y="-2084.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="986,-3591 911,-3591 911,-3555 986,-3555 986,-3591"/>
<text text-anchor="middle" x="948.5" y="-3569.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.76,-2069.96C581.15,-2058.67 679.21,-2055.84 734,-2115 788.02,-2173.33 701.39,-3486.39 754,-3546 789.71,-3586.46 855.78,-3587.06 900.67,-3581.71"/>
<polygon fill="blue" stroke="blue" points="901.3,-3585.16 910.75,-3580.37 900.38,-3578.22 901.3,-3585.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node24"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="726,-1836 146,-1836 146,-1800 726,-1800 726,-1836"/>
<text text-anchor="middle" x="436" y="-1814.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="1135,-1933 762,-1933 762,-1897 1135,-1897 1135,-1933"/>
<text text-anchor="middle" x="948.5" y="-1911.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M719.94,-1836.04C724.75,-1838.82 729.45,-1841.8 734,-1845 751.24,-1857.13 737.06,-1875.46 754,-1888 755.64,-1889.21 757.3,-1890.38 758.99,-1891.51"/>
<polygon fill="blue" stroke="blue" points="757.32,-1894.58 767.68,-1896.81 760.97,-1888.61 757.32,-1894.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node25"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="709,-1674 163,-1674 163,-1638 709,-1638 709,-1674"/>
<text text-anchor="middle" x="436" y="-1652.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="1115,-1771 782,-1771 782,-1735 1115,-1735 1115,-1771"/>
<text text-anchor="middle" x="948.5" y="-1749.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M709.34,-1668.37C717.91,-1672.63 726.17,-1677.49 734,-1683 751.24,-1695.13 737.06,-1713.46 754,-1726 759.9,-1730.37 766.2,-1734.19 772.76,-1737.53"/>
<polygon fill="blue" stroke="blue" points="771.34,-1740.73 781.88,-1741.79 774.3,-1734.39 771.34,-1740.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node26"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="586.5,-1350 285.5,-1350 285.5,-1314 586.5,-1314 586.5,-1350"/>
<text text-anchor="middle" x="436" y="-1328.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="981.5,-1350 915.5,-1350 915.5,-1314 981.5,-1314 981.5,-1350"/>
<text text-anchor="middle" x="948.5" y="-1328.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M586.72,-1332C695.86,-1332 836.24,-1332 905.3,-1332"/>
<polygon fill="blue" stroke="blue" points="905.35,-1335.5 915.35,-1332 905.35,-1328.5 905.35,-1335.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().</title>
<g id="a_node27"><a xlink:title="fn GroupSendFullToken_Verify( &#160;&#160;&#160;&#160;token: &amp;[u8], &#160;&#160;&#160;&#160;user_ids: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;key_pair: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let token = zkgroup::des...">
<polygon fill="white" stroke="black" points="537.5,-1998 334.5,-1998 334.5,-1962 537.5,-1962 537.5,-1998"/>
<text text-anchor="middle" x="436" y="-1976.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendFullToken_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroup...">
<polygon fill="white" stroke="black" points="976.5,-3537 920.5,-3537 920.5,-3501 976.5,-3501 976.5,-3537"/>
<text text-anchor="middle" x="948.5" y="-3515.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.76,-1961.95C581.16,-1950.66 679.22,-1947.82 734,-2007 790.05,-2067.55 699.42,-3430.12 754,-3492 792.32,-3535.45 865.65,-3532.94 910.21,-3526.46"/>
<polygon fill="blue" stroke="blue" points="911.01,-3529.87 920.34,-3524.84 909.91,-3522.96 911.01,-3529.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node28"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="587.5,-810 284.5,-810 284.5,-774 587.5,-774 587.5,-810"/>
<text text-anchor="middle" x="436" y="-788.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="976.5,-297 920.5,-297 920.5,-261 976.5,-261 976.5,-297"/>
<text text-anchor="middle" x="948.5" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M521.15,-810.03C588.75,-819.09 680.88,-818.23 734,-762 768.83,-725.13 719.88,-343.52 754,-306 792.87,-263.25 865.69,-265.44 910.06,-271.69"/>
<polygon fill="blue" stroke="blue" points="909.74,-275.18 920.16,-273.25 910.81,-268.26 909.74,-275.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node29"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="604,-1566 268,-1566 268,-1530 604,-1530 604,-1566"/>
<text text-anchor="middle" x="436" y="-1544.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="1046,-1663 851,-1663 851,-1627 1046,-1627 1046,-1663"/>
<text text-anchor="middle" x="948.5" y="-1641.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.31,-1533.72C649.73,-1537.34 696.63,-1548.71 734,-1575 751.24,-1587.13 737.06,-1605.46 754,-1618 778.74,-1636.31 810.26,-1645.03 840.63,-1648.66"/>
<polygon fill="blue" stroke="blue" points="840.58,-1652.17 850.88,-1649.7 841.28,-1645.21 840.58,-1652.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node30"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="640,-1134 232,-1134 232,-1098 640,-1098 640,-1134"/>
<text text-anchor="middle" x="436" y="-1112.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="1427,-189 1361,-189 1361,-153 1427,-153 1427,-189"/>
<text text-anchor="middle" x="1394" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M517.74,-1134.02C585.13,-1143.85 678.77,-1144.51 734,-1089 770.65,-1052.16 719.84,-895.17 754,-856 868.1,-725.17 1023.32,-902.9 1135,-770 1175.94,-721.28 1119.56,-244.5 1163,-198 1210.35,-147.32 1298.32,-152.68 1350.67,-161.57"/>
<polygon fill="blue" stroke="blue" points="1350.17,-165.04 1360.64,-163.38 1351.42,-158.15 1350.17,-165.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node31"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="617,-1188 255,-1188 255,-1152 617,-1152 617,-1188"/>
<text text-anchor="middle" x="436" y="-1166.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1421,-243 1367,-243 1367,-207 1421,-207 1421,-243"/>
<text text-anchor="middle" x="1394" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M517.48,-1188.04C584.93,-1197.97 678.82,-1198.75 734,-1143 772.9,-1103.71 716.83,-935.93 754,-895 869.64,-767.67 1019.71,-954.65 1135,-827 1190.71,-765.31 1128.25,-529.51 1163,-454 1206.17,-360.17 1305.43,-283.31 1358.33,-247.22"/>
<polygon fill="blue" stroke="blue" points="1360.38,-250.06 1366.72,-241.57 1356.47,-244.25 1360.38,-250.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node32"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="559.5,-2052 312.5,-2052 312.5,-2016 559.5,-2016 559.5,-2052"/>
<text text-anchor="middle" x="436" y="-2030.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.76,-2015.95C581.16,-2004.66 679.22,-2001.82 734,-2061 790.05,-2121.55 699.42,-3484.12 754,-3546 789.7,-3586.47 855.77,-3587.07 900.67,-3581.72"/>
<polygon fill="blue" stroke="blue" points="901.3,-3585.17 910.75,-3580.38 900.37,-3578.23 901.3,-3585.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node33"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="598,-1296 274,-1296 274,-1260 598,-1260 598,-1296"/>
<text text-anchor="middle" x="436" y="-1274.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="983,-1296 914,-1296 914,-1260 983,-1260 983,-1296"/>
<text text-anchor="middle" x="948.5" y="-1274.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M598.17,-1278C704.68,-1278 836.58,-1278 903.75,-1278"/>
<polygon fill="blue" stroke="blue" points="903.96,-1281.5 913.96,-1278 903.96,-1274.5 903.96,-1281.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node34"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="596.5,-864 275.5,-864 275.5,-828 596.5,-828 596.5,-864"/>
<text text-anchor="middle" x="436" y="-842.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="983,-351 914,-351 914,-315 983,-315 983,-351"/>
<text text-anchor="middle" x="948.5" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M516.32,-864.02C583.98,-874.24 678.81,-875.46 734,-819 779.78,-772.17 726.78,-584.56 754,-525 788,-450.59 864.31,-389.13 910.29,-357.06"/>
<polygon fill="blue" stroke="blue" points="912.52,-359.77 918.78,-351.22 908.55,-354 912.52,-359.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node35"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="680,-1728 192,-1728 192,-1692 680,-1692 680,-1728"/>
<text text-anchor="middle" x="436" y="-1706.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1084.5,-1825 812.5,-1825 812.5,-1789 1084.5,-1789 1084.5,-1825"/>
<text text-anchor="middle" x="948.5" y="-1803.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M680.19,-1710.39C699.34,-1716.79 717.59,-1725.46 734,-1737 751.24,-1749.13 737.06,-1767.46 754,-1780 768.44,-1790.68 785.18,-1798.1 802.65,-1803.15"/>
<polygon fill="blue" stroke="blue" points="801.87,-1806.56 812.43,-1805.71 803.64,-1799.79 801.87,-1806.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node36"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="624,-1404 248,-1404 248,-1368 624,-1368 624,-1404"/>
<text text-anchor="middle" x="436" y="-1382.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="1012.5,-1404 884.5,-1404 884.5,-1368 1012.5,-1368 1012.5,-1404"/>
<text text-anchor="middle" x="948.5" y="-1382.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M624.19,-1386C710.9,-1386 808.91,-1386 874.06,-1386"/>
<polygon fill="blue" stroke="blue" points="874.23,-1389.5 884.23,-1386 874.23,-1382.5 874.23,-1389.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node37"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="641,-1458 231,-1458 231,-1422 641,-1422 641,-1458"/>
<text text-anchor="middle" x="436" y="-1436.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="1087.5,-1555 809.5,-1555 809.5,-1519 1087.5,-1519 1087.5,-1555"/>
<text text-anchor="middle" x="948.5" y="-1533.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M641.2,-1452.43C672.45,-1456.09 704.21,-1460.85 734,-1467 789.29,-1478.42 850.3,-1499.3 892.89,-1515.3"/>
<polygon fill="blue" stroke="blue" points="891.91,-1518.67 902.5,-1518.94 894.39,-1512.12 891.91,-1518.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node38"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="693,-1944 179,-1944 179,-1908 693,-1908 693,-1944"/>
<text text-anchor="middle" x="436" y="-1922.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="1041,-3645 856,-3645 856,-3609 1041,-3609 1041,-3645"/>
<text text-anchor="middle" x="948.5" y="-3623.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.45,-1907.99C580.88,-1896.64 679.17,-1893.69 734,-1953 765.06,-1986.6 723.76,-3565.67 754,-3600 776.65,-3625.71 811.56,-3635.34 845.52,-3637.57"/>
<polygon fill="blue" stroke="blue" points="845.39,-3641.06 855.54,-3638.02 845.71,-3634.07 845.39,-3641.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.75,-1907.97C581.14,-1896.68 679.19,-1893.85 734,-1953 786,-2009.12 703.36,-3272.65 754,-3330 788.68,-3369.27 851.96,-3370.98 896.7,-3366.16"/>
<polygon fill="blue" stroke="blue" points="897.29,-3369.62 906.79,-3364.93 896.44,-3362.67 897.29,-3369.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node39"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="604,-1080 268,-1080 268,-1044 604,-1044 604,-1080"/>
<text text-anchor="middle" x="436" y="-1058.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="983,-735 914,-735 914,-699 983,-699 983,-735"/>
<text text-anchor="middle" x="948.5" y="-713.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M517.74,-1080.02C585.13,-1089.85 678.77,-1090.51 734,-1035 770.65,-998.16 723.75,-844.26 754,-802 788.95,-753.18 858.27,-732.04 903.75,-723.15"/>
<polygon fill="blue" stroke="blue" points="904.43,-726.58 913.63,-721.33 903.17,-719.69 904.43,-726.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="523,-2326 349,-2326 349,-2290 523,-2290 523,-2326"/>
<text text-anchor="middle" x="436" y="-2304.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M520.58,-2326.04C588.31,-2335.26 680.92,-2334.62 734,-2278 775.98,-2233.23 712.88,-1771.56 754,-1726 777.27,-1700.22 812.88,-1690.74 847.24,-1688.65"/>
<polygon fill="blue" stroke="blue" points="847.51,-1692.14 857.36,-1688.24 847.23,-1685.15 847.51,-1692.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M520.29,-2326.04C588.08,-2335.33 680.92,-2334.8 734,-2278 780,-2228.78 708.94,-1722.09 754,-1672 775.79,-1647.78 808.48,-1637.93 840.81,-1635.08"/>
<polygon fill="blue" stroke="blue" points="841.07,-1638.57 850.82,-1634.41 840.61,-1631.59 841.07,-1638.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.99,-2326.03C587.83,-2335.4 680.91,-2334.96 734,-2278 784.02,-2224.33 705.01,-1672.61 754,-1618 765.83,-1604.81 780.9,-1595.88 797.38,-1590.02"/>
<polygon fill="blue" stroke="blue" points="798.75,-1593.25 807.23,-1586.91 796.64,-1586.58 798.75,-1593.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="467,-2243 405,-2243 405,-2207 467,-2207 467,-2243"/>
<text text-anchor="middle" x="436" y="-2221.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M467.27,-2233.11C527.93,-2247.33 664.47,-2268.69 734,-2195 769.8,-2157.06 718.93,-1764.61 754,-1726 777.35,-1700.29 812.98,-1690.83 847.33,-1688.73"/>
<polygon fill="blue" stroke="blue" points="847.6,-1692.22 857.45,-1688.31 847.31,-1685.23 847.6,-1692.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M467.3,-2233.14C528,-2247.4 664.63,-2268.84 734,-2195 773.82,-2152.62 714.99,-1715.13 754,-1672 775.85,-1647.83 808.55,-1638 840.88,-1635.15"/>
<polygon fill="blue" stroke="blue" points="841.15,-1638.64 850.89,-1634.48 840.68,-1631.65 841.15,-1638.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M467.32,-2233.16C528.06,-2247.46 664.76,-2268.97 734,-2195 777.84,-2148.17 711.06,-1665.66 754,-1618 765.86,-1604.83 780.94,-1595.92 797.43,-1590.07"/>
<polygon fill="blue" stroke="blue" points="798.8,-1593.3 807.29,-1586.96 796.7,-1586.63 798.8,-1593.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node42"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="463,-2683 409,-2683 409,-2647 463,-2647 463,-2683"/>
<text text-anchor="middle" x="436" y="-2661.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M463.08,-2664.97C516.63,-2665.88 641.68,-2673.1 734,-2718 963.85,-2829.8 924.19,-3009.91 1163,-3101 1357.32,-3175.12 1614.98,-3112.63 1708.59,-3085.26"/>
<polygon fill="blue" stroke="blue" points="1709.82,-3088.55 1718.41,-3082.34 1707.83,-3081.84 1709.82,-3088.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M463.29,-2672.22C521.87,-2686.54 663.47,-2710.95 734,-2635 790.5,-2574.16 698.66,-1949.9 754,-1888 765.33,-1875.33 779.63,-1866.59 795.31,-1860.71"/>
<polygon fill="blue" stroke="blue" points="796.85,-1863.89 805.24,-1857.42 794.65,-1857.25 796.85,-1863.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M463.31,-2672.24C521.92,-2686.59 663.59,-2711.07 734,-2635 766.27,-2600.13 722.39,-1815.48 754,-1780 759.63,-1773.68 766.01,-1768.33 772.92,-1763.83"/>
<polygon fill="blue" stroke="blue" points="775.07,-1766.63 781.96,-1758.58 771.55,-1760.58 775.07,-1766.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="527,-2463 345,-2463 345,-2427 527,-2427 527,-2463"/>
<text text-anchor="middle" x="436" y="-2441.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M514.13,-2463.05C582.25,-2473.93 679.05,-2476.14 734,-2418 778.6,-2370.81 710.55,-1882.24 754,-1834 767.05,-1819.51 783.99,-1810.17 802.42,-1804.39"/>
<polygon fill="blue" stroke="blue" points="803.48,-1807.73 812.19,-1801.69 801.62,-1800.98 803.48,-1807.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M514.08,-2463C582.17,-2473.86 678.95,-2476.04 734,-2418 774.55,-2375.24 714.48,-1931.72 754,-1888 765.4,-1875.39 779.74,-1866.69 795.45,-1860.84"/>
<polygon fill="blue" stroke="blue" points="796.99,-1864.01 805.39,-1857.55 794.79,-1857.37 796.99,-1864.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M513.84,-2463.03C582.01,-2473.99 679.05,-2476.31 734,-2418 782.64,-2366.38 706.61,-1832.77 754,-1780 759.58,-1773.79 765.87,-1768.52 772.69,-1764.08"/>
<polygon fill="blue" stroke="blue" points="774.73,-1766.94 781.6,-1758.88 771.2,-1760.9 774.73,-1766.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="539.5,-2409 332.5,-2409 332.5,-2373 539.5,-2373 539.5,-2409"/>
<text text-anchor="middle" x="436" y="-2387.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M520.27,-2409.02C588.05,-2418.3 680.88,-2417.76 734,-2361 778.14,-2313.84 710.77,-1827.99 754,-1780 759.59,-1773.8 765.89,-1768.54 772.71,-1764.1"/>
<polygon fill="blue" stroke="blue" points="774.75,-1766.96 781.63,-1758.9 771.22,-1760.92 774.75,-1766.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node45"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="993,-3994 904,-3994 904,-3958 993,-3958 993,-3994"/>
<text text-anchor="middle" x="948.5" y="-3972.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;pub fn restore(self, responses2_bytes: &amp;[Vec&lt;u8&gt;]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if responses2_bytes.len() != self.server_ids.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(Error::NumServers { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1778,-4293 1713,-4293 1713,-4257 1778,-4257 1778,-4293"/>
<text text-anchor="middle" x="1745.5" y="-4271.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M993.36,-3980.31C1031.19,-3984.52 1087.12,-3991.93 1135,-4003 1357.8,-4054.53 1470.45,-3991.45 1625,-4160 1652.11,-4189.56 1617.23,-4219.06 1645,-4248 1659.88,-4263.51 1682.69,-4270.41 1702.72,-4273.36"/>
<polygon fill="blue" stroke="blue" points="1702.54,-4276.87 1712.88,-4274.58 1703.36,-4269.92 1702.54,-4276.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="1431,-4279 1357,-4279 1357,-4243 1431,-4243 1431,-4279"/>
<text text-anchor="middle" x="1394" y="-4257.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M993.16,-3968.87C1035.49,-3964.67 1098.53,-3966.06 1135,-4003 1201.47,-4070.31 1098.48,-4144.82 1163,-4214 1209.65,-4264.02 1293.97,-4268.66 1346.53,-4265.92"/>
<polygon fill="blue" stroke="blue" points="1346.84,-4269.4 1356.6,-4265.28 1346.4,-4262.42 1346.84,-4269.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1421,-4387 1367,-4387 1367,-4351 1421,-4351 1421,-4387"/>
<text text-anchor="middle" x="1394" y="-4365.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M993.15,-3968.53C1035.8,-3963.99 1099.34,-3965.05 1135,-4003 1186.76,-4058.08 1110.48,-4287.64 1163,-4342 1213.05,-4393.8 1305.69,-4386.32 1356.8,-4377.16"/>
<polygon fill="blue" stroke="blue" points="1357.58,-4380.58 1366.74,-4375.27 1356.26,-4373.7 1357.58,-4380.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="567.5,-3994 304.5,-3994 304.5,-3958 567.5,-3958 567.5,-3994"/>
<text text-anchor="middle" x="436" y="-3972.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M567.8,-3976C673.47,-3976 816.8,-3976 893.61,-3976"/>
<polygon fill="blue" stroke="blue" points="893.99,-3979.5 903.99,-3976 893.99,-3972.5 893.99,-3979.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node47"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="995.5,-4048 901.5,-4048 901.5,-4012 995.5,-4012 995.5,-4048"/>
<text text-anchor="middle" x="948.5" y="-4026.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="1421,-4333 1367,-4333 1367,-4297 1421,-4297 1421,-4333"/>
<text text-anchor="middle" x="1394" y="-4311.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M995.82,-4029.82C1038.59,-4032.33 1100.56,-4043.26 1135,-4083 1195.23,-4152.49 1097.37,-4223.59 1163,-4288 1214.28,-4338.32 1306.03,-4331.55 1356.77,-4322.87"/>
<polygon fill="blue" stroke="blue" points="1357.44,-4326.3 1366.65,-4321.06 1356.18,-4319.42 1357.44,-4326.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="569,-4048 303,-4048 303,-4012 569,-4012 569,-4048"/>
<text text-anchor="middle" x="436" y="-4026.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.13,-4030C673.39,-4030 813.68,-4030 890.8,-4030"/>
<polygon fill="blue" stroke="blue" points="891.25,-4033.5 901.25,-4030 891.25,-4026.5 891.25,-4033.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="468.5,-3857 403.5,-3857 403.5,-3821 468.5,-3821 468.5,-3857"/>
<text text-anchor="middle" x="436" y="-3835.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M468.78,-3831.19C528.51,-3818.57 658.3,-3801.17 734,-3866 761.84,-3889.84 726.93,-3921.29 754,-3946 791.31,-3980.05 850.5,-3984.68 893.59,-3982.57"/>
<polygon fill="blue" stroke="blue" points="893.87,-3986.06 903.63,-3981.95 893.43,-3979.08 893.87,-3986.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="471,-3911 401,-3911 401,-3875 471,-3875 471,-3911"/>
<text text-anchor="middle" x="436" y="-3889.3" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M471.41,-3888.85C531.99,-3883.54 658.4,-3881.68 734,-3946 754.45,-3963.4 733.23,-3985.99 754,-4003 791.95,-4034.06 848.75,-4038.65 891.01,-4036.76"/>
<polygon fill="blue" stroke="blue" points="891.36,-4040.25 901.14,-4036.17 890.96,-4033.26 891.36,-4040.25"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node51"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="1772.5,-2550 1718.5,-2550 1718.5,-2514 1772.5,-2514 1772.5,-2550"/>
<text text-anchor="middle" x="1745.5" y="-2528.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="2021.5,-2633 1965.5,-2633 1965.5,-2597 2021.5,-2597 2021.5,-2633"/>
<text text-anchor="middle" x="1993.5" y="-2611.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.83,-2540.88C1816.87,-2555.74 1905.58,-2585.67 1955.75,-2602.6"/>
<polygon fill="blue" stroke="blue" points="1954.65,-2605.92 1965.24,-2605.8 1956.88,-2599.29 1954.65,-2605.92"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="1451.5,-2523 1336.5,-2523 1336.5,-2487 1451.5,-2487 1451.5,-2523"/>
<text text-anchor="middle" x="1394" y="-2501.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.54,-2509.37C1523.9,-2514.96 1647.15,-2524.48 1708.12,-2529.19"/>
<polygon fill="blue" stroke="blue" points="1708.17,-2532.7 1718.41,-2529.98 1708.71,-2525.72 1708.17,-2532.7"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node53"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="1809.5,-2496 1681.5,-2496 1681.5,-2460 1809.5,-2460 1809.5,-2496"/>
<text text-anchor="middle" x="1745.5" y="-2474.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.54,-2500.63C1511.23,-2496.02 1605.57,-2488.73 1670.99,-2483.68"/>
<polygon fill="blue" stroke="blue" points="1671.54,-2487.15 1681.24,-2482.89 1671,-2480.17 1671.54,-2487.15"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="2295,-2633 2197,-2633 2197,-2597 2295,-2597 2295,-2633"/>
<text text-anchor="middle" x="2246" y="-2611.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1809.64,-2495.35C1907.18,-2522.16 2093.08,-2573.25 2187.25,-2599.13"/>
<polygon fill="blue" stroke="blue" points="2186.33,-2602.51 2196.9,-2601.78 2188.18,-2595.76 2186.33,-2602.51"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2242.99,-2633.06C2227.21,-2728.86 2153.8,-3187.51 2131,-3566 2129.96,-3583.3 2121.89,-3590.26 2131,-3605 2144.18,-3626.33 2170.24,-3635.58 2194.22,-3639.38"/>
<polygon fill="blue" stroke="blue" points="2193.95,-3642.88 2204.32,-3640.7 2194.86,-3635.94 2193.95,-3642.88"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="1838,-2643 1653,-2643 1653,-2607 1838,-2607 1838,-2643"/>
<text text-anchor="middle" x="1745.5" y="-2621.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1838.28,-2638.72C1850.27,-2640.07 1862.41,-2641.23 1874,-2642 1979.99,-2649.03 2007.32,-2652.7 2113,-2642 2137.43,-2639.53 2164.02,-2634.54 2186.89,-2629.52"/>
<polygon fill="blue" stroke="blue" points="2187.79,-2632.91 2196.78,-2627.3 2186.25,-2626.08 2187.79,-2632.91"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1838.1,-2621.28C1878.67,-2619.63 1924.12,-2617.78 1955.15,-2616.52"/>
<polygon fill="blue" stroke="blue" points="1955.64,-2620 1965.48,-2616.1 1955.35,-2613.01 1955.64,-2620"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1999.7,-2633.2C2018.45,-2699.58 2083.03,-2935.23 2113,-3134 2120.97,-3186.89 2115.13,-3572.61 2149,-3614 2159.99,-3627.43 2177.08,-3634.48 2193.82,-3638.09"/>
<polygon fill="blue" stroke="blue" points="2193.68,-3641.62 2204.13,-3639.92 2194.9,-3634.73 2193.68,-3641.62"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2021.78,-2615C2061.13,-2615 2134.78,-2615 2186.7,-2615"/>
<polygon fill="blue" stroke="blue" points="2186.77,-2618.5 2196.77,-2615 2186.77,-2611.5 2186.77,-2618.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<g id="a_node68"><a xlink:title="fn auth_secret(input: &amp;[u8; 64], auth_pt: &amp;RistrettoPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;Kdf::make( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_SVR_MasterAuthorizationKey_20240823&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;auth_pt.compress().to_bytes(), ...">
<polygon fill="white" stroke="black" points="2042,-4330 1945,-4330 1945,-4294 2042,-4294 2042,-4330"/>
<text text-anchor="middle" x="1993.5" y="-4308.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_secret</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1778.16,-4279.76C1817.65,-4285.7 1885.93,-4295.97 1934.82,-4303.32"/>
<polygon fill="blue" stroke="blue" points="1934.53,-4306.82 1944.94,-4304.85 1935.57,-4299.9 1934.53,-4306.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1431.22,-4253.67C1481.37,-4245.8 1571.77,-4240.16 1625,-4288 1654.83,-4314.81 1613.65,-4350.98 1645,-4376 1705.3,-4424.14 2104.1,-4347.43 2113,-4339 2212.48,-4244.68 2238.73,-3787.8 2243.91,-3669.18"/>
<polygon fill="blue" stroke="blue" points="2247.41,-3669.22 2244.34,-3659.08 2240.42,-3668.93 2247.41,-3669.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<g id="a_node60"><a xlink:title="fn to_ristretto_pt(b: &amp;[u8]) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;CompressedRistretto::from_slice(b).ok()?.decompress() }">
<polygon fill="white" stroke="black" points="2050,-4185 1937,-4185 1937,-4149 2050,-4149 2050,-4185"/>
<text text-anchor="middle" x="1993.5" y="-4163.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.36,-4259.87C1477.81,-4259.62 1560,-4263.25 1625,-4288 1635.14,-4291.86 1634.65,-4298.74 1645,-4302 1685.9,-4314.89 1797.85,-4317.07 1838,-4302 1895.86,-4280.28 1946.26,-4226 1972.73,-4193.26"/>
<polygon fill="blue" stroke="blue" points="1975.78,-4195.05 1979.24,-4185.04 1970.29,-4190.7 1975.78,-4195.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node66"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1820.5,-4367 1670.5,-4367 1670.5,-4331 1820.5,-4331 1820.5,-4367"/>
<text text-anchor="middle" x="1745.5" y="-4345.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.4,-4256.5C1479.38,-4252.42 1564.72,-4251.71 1625,-4288 1638.41,-4296.08 1632.43,-4307.66 1645,-4317 1650.02,-4320.73 1655.49,-4324.03 1661.2,-4326.96"/>
<polygon fill="blue" stroke="blue" points="1659.79,-4330.17 1670.33,-4331.26 1662.77,-4323.83 1659.79,-4330.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1782.5,-4185 1708.5,-4185 1708.5,-4149 1782.5,-4149 1782.5,-4185"/>
<text text-anchor="middle" x="1745.5" y="-4163.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1782.53,-4167C1820.25,-4167 1880.31,-4167 1926.55,-4167"/>
<polygon fill="blue" stroke="blue" points="1926.78,-4170.5 1936.78,-4167 1926.78,-4163.5 1926.78,-4170.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1997.13,-4149C2010.07,-4062.85 2069.51,-3693.63 2149,-3614 2158.84,-3604.14 2171.98,-3597.81 2185.38,-3593.77"/>
<polygon fill="blue" stroke="blue" points="2186.34,-3597.13 2195.13,-3591.21 2184.57,-3590.36 2186.34,-3597.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create(&amp;mut self, req_bytes: &amp;[u8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.versions.clear(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1423.5,-4205 1364.5,-4205 1364.5,-4169 1423.5,-4169 1423.5,-4205"/>
<text text-anchor="middle" x="1394" y="-4183.3" font-family="Helvetica,sans-Serif" font-size="14.00">create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="1772.5,-4239 1718.5,-4239 1718.5,-4203 1772.5,-4203 1772.5,-4239"/>
<text text-anchor="middle" x="1745.5" y="-4217.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1423.6,-4189.78C1486.87,-4195.94 1638.59,-4210.7 1708.32,-4217.48"/>
<polygon fill="blue" stroke="blue" points="1708.1,-4220.98 1718.39,-4218.46 1708.78,-4214.01 1708.1,-4220.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1421.04,-4310.01C1467.42,-4302.69 1565.1,-4294.6 1625,-4342 1645.4,-4358.14 1623.7,-4382.08 1645,-4397 1697.45,-4433.74 2096.82,-4388.71 2113,-4374 2219.78,-4276.88 2240.71,-3791.65 2244.31,-3669.13"/>
<polygon fill="blue" stroke="blue" points="2247.82,-3669.14 2244.6,-3659.05 2240.82,-3668.95 2247.82,-3669.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.27,-4317.56C1471.25,-4322.42 1582,-4333.19 1659.87,-4340.77"/>
<polygon fill="blue" stroke="blue" points="1659.86,-4344.28 1670.16,-4341.77 1660.54,-4337.32 1659.86,-4344.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.3,-4311.01C1466.82,-4305.53 1561.52,-4300.6 1625,-4342 1639.68,-4351.58 1629.78,-4367.3 1645,-4376 1719.46,-4418.59 1753.87,-4392.74 1838,-4376 1877.87,-4368.07 1920.34,-4349.67 1950.65,-4334.62"/>
<polygon fill="blue" stroke="blue" points="1952.3,-4337.71 1959.64,-4330.08 1949.14,-4331.46 1952.3,-4337.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.83,-4215.22C1809.31,-4207.21 1876.46,-4192.47 1926.95,-4181.39"/>
<polygon fill="blue" stroke="blue" points="1927.8,-4184.79 1936.81,-4179.22 1926.3,-4177.95 1927.8,-4184.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore1(&amp;mut self, req_bytes: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.inner &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1782.5,-4131 1708.5,-4131 1708.5,-4095 1782.5,-4095 1782.5,-4131"/>
<text text-anchor="middle" x="1745.5" y="-4109.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1765.74,-4094.79C1842.77,-4021.85 2129.1,-3750.74 2218.29,-3666.29"/>
<polygon fill="blue" stroke="blue" points="2220.97,-3668.58 2225.82,-3659.16 2216.15,-3663.49 2220.97,-3668.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1782.53,-4120.91C1820.33,-4129.21 1880.56,-4142.43 1926.84,-4152.59"/>
<polygon fill="blue" stroke="blue" points="1926.27,-4156.04 1936.78,-4154.77 1927.77,-4149.21 1926.27,-4156.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="1020,-4242 877,-4242 877,-4206 1020,-4206 1020,-4242"/>
<text text-anchor="middle" x="948.5" y="-4220.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1020.07,-4222.7C1181.6,-4220.07 1568.71,-4215.8 1625,-4234 1635.32,-4237.34 1635.17,-4243.4 1645,-4248 1663.19,-4256.52 1684.55,-4262.75 1702.81,-4267.08"/>
<polygon fill="blue" stroke="blue" points="1702.07,-4270.5 1712.59,-4269.28 1703.61,-4263.67 1702.07,-4270.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1020.26,-4229.9C1111.82,-4237.54 1268.78,-4250.64 1346.54,-4257.12"/>
<polygon fill="blue" stroke="blue" points="1346.71,-4260.65 1356.97,-4257.99 1347.3,-4253.67 1346.71,-4260.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M995.68,-4205.89C1038.33,-4190.19 1103.85,-4168.68 1163,-4160 1360.3,-4131.06 1599.29,-4150.94 1698.2,-4161.54"/>
<polygon fill="blue" stroke="blue" points="1697.85,-4165.02 1708.17,-4162.63 1698.61,-4158.06 1697.85,-4165.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1020.26,-4218.1C1114.9,-4210.2 1279.4,-4196.48 1354.1,-4190.25"/>
<polygon fill="blue" stroke="blue" points="1354.78,-4193.7 1364.45,-4189.38 1354.2,-4186.73 1354.78,-4193.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1000.62,-4242.07C1043.48,-4256.55 1106.54,-4276.32 1163,-4288 1230.75,-4302.02 1311.35,-4309.39 1356.91,-4312.72"/>
<polygon fill="blue" stroke="blue" points="1356.67,-4316.21 1366.89,-4313.42 1357.17,-4309.23 1356.67,-4316.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M985.01,-4205.83C1026.49,-4185.6 1097.76,-4153.95 1163,-4140 1358.44,-4098.22 1598.92,-4104.88 1698.24,-4110.07"/>
<polygon fill="blue" stroke="blue" points="1698.07,-4113.56 1708.24,-4110.61 1698.45,-4106.57 1698.07,-4113.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M974.63,-4242.19C1013.09,-4269 1089.82,-4318.49 1163,-4342 1229.05,-4363.22 1310.56,-4368.1 1356.68,-4369.03"/>
<polygon fill="blue" stroke="blue" points="1356.73,-4372.53 1366.78,-4369.18 1356.84,-4365.53 1356.73,-4372.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1820.64,-4337.85C1857.18,-4332.35 1900.59,-4325.82 1934.64,-4320.7"/>
<polygon fill="blue" stroke="blue" points="1935.52,-4324.11 1944.89,-4319.16 1934.48,-4317.19 1935.52,-4324.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1421.08,-4381.49C1524.17,-4428.85 1907.61,-4585.65 2113,-4403 2225.24,-4303.18 2242.12,-3795.76 2244.59,-3669.48"/>
<polygon fill="blue" stroke="blue" points="2248.09,-3669.18 2244.77,-3659.11 2241.09,-3669.05 2248.09,-3669.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2019.9,-4293.71C2047.12,-4272.73 2089.58,-4235.79 2113,-4194 2214.95,-4012.12 2238.53,-3753.87 2243.66,-3669.12"/>
<polygon fill="blue" stroke="blue" points="2247.16,-3669.18 2244.23,-3659 2240.17,-3668.79 2247.16,-3669.18"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node69"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1020,-3184 877,-3184 877,-3148 1020,-3148 1020,-3184"/>
<text text-anchor="middle" x="948.5" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node70"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="1458,-3184 1330,-3184 1330,-3148 1458,-3148 1458,-3184"/>
<text text-anchor="middle" x="1394" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1020.26,-3166C1102.2,-3166 1236.5,-3166 1319.55,-3166"/>
<polygon fill="blue" stroke="blue" points="1319.67,-3169.5 1329.67,-3166 1319.67,-3162.5 1319.67,-3169.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node72"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="1457,-3238 1331,-3238 1331,-3202 1457,-3202 1457,-3238"/>
<text text-anchor="middle" x="1394" y="-3216.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1020.16,-3175.1C1061.74,-3180.41 1115.34,-3187.19 1163,-3193 1215.87,-3199.45 1275.62,-3206.45 1320.96,-3211.71"/>
<polygon fill="blue" stroke="blue" points="1320.66,-3215.2 1330.99,-3212.87 1321.46,-3208.25 1320.66,-3215.2"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M949.78,-3147.82C952.11,-3067.54 973.32,-2743.1 1163,-2613 1205.33,-2583.97 1584.29,-2581.73 1625,-2613 1652.36,-2634.02 1634.73,-2655.06 1645,-2688 1673.97,-2780.94 1714.72,-2888.98 1733.82,-2938.57"/>
<polygon fill="blue" stroke="blue" points="1730.58,-2939.9 1737.45,-2947.96 1737.11,-2937.37 1730.58,-2939.9"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M950.5,-3147.89C955.8,-3072.14 987.38,-2779.24 1163,-2663 1248.61,-2606.33 1550.24,-2592.63 1625,-2663 1678.5,-2713.35 1598.62,-2936.02 1645,-2993 1660.05,-3011.49 1686.38,-3018.05 1708.17,-3020.09"/>
<polygon fill="blue" stroke="blue" points="1708.23,-3023.6 1718.44,-3020.76 1708.68,-3016.61 1708.23,-3023.6"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M950.97,-3147.88C958.01,-3074.67 995.23,-2799.53 1163,-2691 1206.1,-2663.12 1587.7,-2655.73 1625,-2691 1653.79,-2718.22 1620.06,-3016.22 1645,-3047 1660.01,-3065.52 1686.34,-3072.08 1708.14,-3074.11"/>
<polygon fill="blue" stroke="blue" points="1708.21,-3077.62 1718.41,-3074.77 1708.66,-3070.64 1708.21,-3077.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1458.23,-3172.72C1509.59,-3174.53 1580.57,-3168.13 1625,-3127 1651.89,-3102.1 1619.35,-3073.17 1645,-3047 1661.47,-3030.19 1687.27,-3023.53 1708.47,-3021.02"/>
<polygon fill="blue" stroke="blue" points="1708.81,-3024.5 1718.45,-3020.1 1708.17,-3017.53 1708.81,-3024.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node71"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="473.5,-3184 398.5,-3184 398.5,-3148 473.5,-3148 473.5,-3184"/>
<text text-anchor="middle" x="436" y="-3162.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M473.71,-3166C555.41,-3166 753.86,-3166 866.29,-3166"/>
<polygon fill="blue" stroke="blue" points="866.56,-3169.5 876.56,-3166 866.56,-3162.5 866.56,-3169.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.12,-3223.48C1505.23,-3223.69 1572.33,-3218.45 1625,-3193 1668.48,-3171.99 1705.54,-3128.66 1726.4,-3100.48"/>
<polygon fill="blue" stroke="blue" points="1729.32,-3102.42 1732.34,-3092.27 1723.65,-3098.32 1729.32,-3102.42"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1794.81,-2974.23C1873.77,-2990.3 2029.99,-3033.48 2113,-3134 2221.13,-3264.94 2240.7,-3480.87 2244.23,-3558.28"/>
<polygon fill="blue" stroke="blue" points="2240.74,-3558.81 2244.64,-3568.67 2247.74,-3558.54 2240.74,-3558.81"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.25,-2947.87C1855.48,-2889.26 2117.28,-2704.93 2211.12,-2638.86"/>
<polygon fill="blue" stroke="blue" points="2213.24,-2641.64 2219.4,-2633.02 2209.21,-2635.92 2213.24,-2641.64"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1772.89,-3024.69C1791.82,-3028.77 1817.49,-3035.83 1838,-3047 1856.54,-3057.1 1855.72,-3067.43 1874,-3078 1971.46,-3134.38 2044.31,-3072.79 2113,-3162 2174.47,-3241.84 2085.01,-3536.16 2149,-3614 2160.02,-3627.4 2177.12,-3634.45 2193.85,-3638.06"/>
<polygon fill="blue" stroke="blue" points="2193.71,-3641.59 2204.17,-3639.89 2194.93,-3634.7 2193.71,-3641.59"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.73,-3018.31C1792.82,-3015.72 1820.06,-3009.21 1838,-2993 1945.34,-2895.99 1979.73,-2713.43 1989.26,-2643.37"/>
<polygon fill="blue" stroke="blue" points="1992.77,-2643.48 1990.58,-2633.12 1985.83,-2642.59 1992.77,-2643.48"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1539.5,-3038 1248.5,-3038 1248.5,-3002 1539.5,-3002 1539.5,-3038"/>
<text text-anchor="middle" x="1394" y="-3016.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1539.8,-3005.36C1568.13,-3001.83 1597.56,-2997.7 1625,-2993 1645.17,-2989.55 1667.07,-2984.87 1686.53,-2980.39"/>
<polygon fill="blue" stroke="blue" points="1687.53,-2983.75 1696.47,-2978.07 1685.94,-2976.93 1687.53,-2983.75"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1539.68,-3020C1601.39,-3020 1668.27,-3020 1708.25,-3020"/>
<polygon fill="blue" stroke="blue" points="1708.3,-3023.5 1718.3,-3020 1708.3,-3016.5 1708.3,-3023.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1539.8,-3034.64C1568.13,-3038.17 1597.56,-3042.3 1625,-3047 1653.12,-3051.81 1684.59,-3059 1708.17,-3064.74"/>
<polygon fill="blue" stroke="blue" points="1707.53,-3068.19 1718.08,-3067.19 1709.21,-3061.4 1707.53,-3068.19"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1770.15,-3092.13C1795.17,-3110.88 1836.18,-3140.37 1874,-3162 1975.67,-3220.14 2044.89,-3177.72 2113,-3273 2201.62,-3396.98 2050.72,-3497.53 2149,-3614 2160.19,-3627.26 2177.33,-3634.27 2194.04,-3637.9"/>
<polygon fill="blue" stroke="blue" points="2193.88,-3641.43 2204.34,-3639.75 2195.11,-3634.54 2193.88,-3641.43"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="1521,-2984 1267,-2984 1267,-2948 1521,-2948 1521,-2984"/>
<text text-anchor="middle" x="1394" y="-2962.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1521.18,-2966C1577.59,-2966 1641.34,-2966 1686.25,-2966"/>
<polygon fill="blue" stroke="blue" points="1686.38,-2969.5 1696.38,-2966 1686.38,-2962.5 1686.38,-2969.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1521.28,-2978.4C1555.08,-2982.38 1591.51,-2987.27 1625,-2993 1653.12,-2997.81 1684.59,-3005 1708.17,-3010.74"/>
<polygon fill="blue" stroke="blue" points="1707.53,-3014.19 1718.08,-3013.19 1709.21,-3007.4 1707.53,-3014.19"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1521.14,-2956.86C1557.84,-2960.16 1595.85,-2970.07 1625,-2993 1645.12,-3008.82 1626.11,-3029.73 1645,-3047 1662.07,-3062.6 1687.24,-3069.33 1708,-3072.17"/>
<polygon fill="blue" stroke="blue" points="1707.76,-3075.67 1718.08,-3073.3 1708.54,-3068.71 1707.76,-3075.67"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="1460.5,-3092 1327.5,-3092 1327.5,-3056 1460.5,-3056 1460.5,-3092"/>
<text text-anchor="middle" x="1394" y="-3070.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1460.74,-3074C1533.9,-3074 1649.49,-3074 1708,-3074"/>
<polygon fill="blue" stroke="blue" points="1708.23,-3077.5 1718.23,-3074 1708.23,-3070.5 1708.23,-3077.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node79"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1466,-3911 1322,-3911 1322,-3875 1466,-3875 1466,-3911"/>
<text text-anchor="middle" x="1394" y="-3889.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="1778.5,-3483 1712.5,-3483 1712.5,-3447 1778.5,-3447 1778.5,-3483"/>
<text text-anchor="middle" x="1745.5" y="-3461.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1466.26,-3904.55C1518.08,-3908.51 1585.78,-3903.67 1625,-3861 1680.58,-3800.54 1593.36,-3555.86 1645,-3492 1658.67,-3475.09 1681.77,-3468.15 1702.28,-3465.53"/>
<polygon fill="blue" stroke="blue" points="1702.78,-3468.99 1712.39,-3464.54 1702.09,-3462.03 1702.78,-3468.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="1772.5,-3429 1718.5,-3429 1718.5,-3393 1772.5,-3393 1772.5,-3429"/>
<text text-anchor="middle" x="1745.5" y="-3407.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1449.71,-3874.97C1504.46,-3853.75 1586,-3812.82 1625,-3747 1660.08,-3687.8 1601.45,-3491.28 1645,-3438 1660.09,-3419.54 1686.41,-3412.98 1708.2,-3410.93"/>
<polygon fill="blue" stroke="blue" points="1708.71,-3414.41 1718.46,-3410.26 1708.25,-3407.42 1708.71,-3414.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn verify(&amp;self, point: &amp;RistrettoPoint, token: &amp;[u8]) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.sk_prime * point; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected = Endorsement::to_token_raw(P); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1773.5,-3537 1717.5,-3537 1717.5,-3501 1773.5,-3501 1773.5,-3537"/>
<text text-anchor="middle" x="1745.5" y="-3515.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1466.15,-3904.44C1517.91,-3908.35 1585.58,-3903.48 1625,-3861 1672.71,-3809.58 1600.64,-3600.34 1645,-3546 1659.79,-3527.89 1685.39,-3521.23 1706.92,-3519.05"/>
<polygon fill="blue" stroke="blue" points="1707.38,-3522.53 1717.1,-3518.31 1706.87,-3515.55 1707.38,-3522.53"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;pub fn to_token(&amp;self, client_key: &amp;ClientDecryptionKey) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.R * client_key.a_inv; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::to_token_raw(P) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1783,-3591 1708,-3591 1708,-3555 1783,-3555 1783,-3591"/>
<text text-anchor="middle" x="1745.5" y="-3569.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1466.1,-3900.49C1515.51,-3901.87 1580.26,-3895.57 1625,-3861 1709.48,-3795.72 1734.72,-3660.09 1741.85,-3601.25"/>
<polygon fill="blue" stroke="blue" points="1745.35,-3601.52 1742.99,-3591.19 1738.39,-3600.74 1745.35,-3601.52"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node80"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="986,-3911 911,-3911 911,-3875 986,-3875 986,-3911"/>
<text text-anchor="middle" x="948.5" y="-3889.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M986.17,-3893C1057.13,-3893 1214.73,-3893 1311.62,-3893"/>
<polygon fill="blue" stroke="blue" points="1311.67,-3896.5 1321.67,-3893 1311.67,-3889.5 1311.67,-3896.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1778.58,-3468.9C1797.34,-3472.47 1820.66,-3479.23 1838,-3492 1861.22,-3509.11 1849.36,-3531.01 1874,-3546 1970.57,-3604.73 2107.77,-3602.47 2185.4,-3595.06"/>
<polygon fill="blue" stroke="blue" points="2185.9,-3598.52 2195.49,-3594.03 2185.19,-3591.56 2185.9,-3598.52"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1778.76,-3461.96C1797.82,-3458.71 1821.39,-3451.96 1838,-3438 2108.61,-3210.42 2215.84,-2759.31 2239.64,-2642.92"/>
<polygon fill="blue" stroke="blue" points="2243.1,-2643.51 2241.63,-2633.01 2236.23,-2642.13 2243.1,-2643.51"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="2098,-3483 1889,-3483 1889,-3447 2098,-3447 2098,-3483"/>
<text text-anchor="middle" x="1993.5" y="-3461.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1778.66,-3465C1804.37,-3465 1842.05,-3465 1878.65,-3465"/>
<polygon fill="blue" stroke="blue" points="1878.93,-3468.5 1888.93,-3465 1878.93,-3461.5 1878.93,-3468.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="1444.5,-3537 1343.5,-3537 1343.5,-3501 1444.5,-3501 1444.5,-3537"/>
<text text-anchor="middle" x="1394" y="-3515.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1444.57,-3514.7C1491.3,-3510.29 1563.18,-3502.58 1625,-3492 1651.02,-3487.55 1679.91,-3481.06 1702.76,-3475.57"/>
<polygon fill="blue" stroke="blue" points="1703.59,-3478.97 1712.48,-3473.2 1701.93,-3472.16 1703.59,-3478.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn compress(self) &#45;&gt; Endorsement&lt;CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Endorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: self.R.compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1787,-3375 1704,-3375 1704,-3339 1787,-3339 1787,-3375"/>
<text text-anchor="middle" x="1745.5" y="-3353.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1444.59,-3528.56C1496.5,-3535.47 1577,-3536.92 1625,-3492 1660.64,-3458.64 1611.92,-3419.9 1645,-3384 1657.47,-3370.46 1675.97,-3363.45 1693.65,-3359.89"/>
<polygon fill="blue" stroke="blue" points="1694.63,-3363.28 1703.92,-3358.18 1693.48,-3356.38 1694.63,-3363.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1444.55,-3527.04C1495.3,-3532.38 1573.81,-3532.27 1625,-3492 1645.12,-3476.18 1626.11,-3455.27 1645,-3438 1662.07,-3422.4 1687.24,-3415.67 1708,-3412.83"/>
<polygon fill="blue" stroke="blue" points="1708.54,-3416.29 1718.08,-3411.7 1707.76,-3409.33 1708.54,-3416.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1444.7,-3519C1515.43,-3519 1643.54,-3519 1706.92,-3519"/>
<polygon fill="blue" stroke="blue" points="1707.24,-3522.5 1717.24,-3519 1707.24,-3515.5 1707.24,-3522.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1444.57,-3523.3C1491.3,-3527.71 1563.18,-3535.42 1625,-3546 1649.27,-3550.15 1676.03,-3556.07 1698.06,-3561.31"/>
<polygon fill="blue" stroke="blue" points="1697.28,-3564.72 1707.82,-3563.66 1698.92,-3557.92 1697.28,-3564.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1492,-3591 1296,-3591 1296,-3555 1492,-3555 1492,-3591"/>
<text text-anchor="middle" x="1394" y="-3569.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1492.09,-3583.48C1536.81,-3583.22 1588.03,-3575.08 1625,-3546 1645.12,-3530.18 1626.11,-3509.27 1645,-3492 1660.53,-3477.81 1682.76,-3470.96 1702.28,-3467.7"/>
<polygon fill="blue" stroke="blue" points="1702.78,-3471.16 1712.19,-3466.3 1701.8,-3464.23 1702.78,-3471.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1492.1,-3586.17C1537.91,-3586.82 1590.07,-3578.69 1625,-3546 1660.64,-3512.64 1611.92,-3473.9 1645,-3438 1660.95,-3420.69 1686.76,-3414.04 1708.1,-3411.66"/>
<polygon fill="blue" stroke="blue" points="1708.48,-3415.14 1718.15,-3410.81 1707.89,-3408.17 1708.48,-3415.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1492.13,-3563.89C1533.26,-3559.44 1581.61,-3553.43 1625,-3546 1652.76,-3541.25 1683.77,-3534.19 1707.24,-3528.48"/>
<polygon fill="blue" stroke="blue" points="1708.26,-3531.83 1717.14,-3526.05 1706.59,-3525.04 1708.26,-3531.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1492.36,-3573C1559.25,-3573 1645.1,-3573 1697.4,-3573"/>
<polygon fill="blue" stroke="blue" points="1697.71,-3576.5 1707.71,-3573 1697.71,-3569.5 1697.71,-3576.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="1438,-3429 1350,-3429 1350,-3393 1438,-3393 1438,-3429"/>
<text text-anchor="middle" x="1394" y="-3407.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1438.01,-3414.68C1484.36,-3418.97 1560.21,-3426.91 1625,-3438 1651.02,-3442.45 1679.91,-3448.94 1702.76,-3454.43"/>
<polygon fill="blue" stroke="blue" points="1701.93,-3457.84 1712.48,-3456.8 1703.59,-3451.03 1701.93,-3457.84"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1438.21,-3411C1507.75,-3411 1643.28,-3411 1708.17,-3411"/>
<polygon fill="blue" stroke="blue" points="1708.33,-3414.5 1718.33,-3411 1708.33,-3407.5 1708.33,-3414.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1787.36,-3359.88C1805.21,-3363.22 1825,-3370.08 1838,-3384 1888.34,-3437.9 1819.77,-3496.01 1874,-3546 1952.85,-3618.67 2016.64,-3531.95 2113,-3579 2133.05,-3588.79 2129.66,-3602.86 2149,-3614 2162.91,-3622.01 2179.33,-3627.76 2194.62,-3631.84"/>
<polygon fill="blue" stroke="blue" points="2193.92,-3635.27 2204.47,-3634.28 2195.61,-3628.48 2193.92,-3635.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1772.53,-3411.94C1793.07,-3414.08 1820.99,-3420.35 1838,-3438 1882.88,-3484.57 1826.38,-3535.24 1874,-3579 1962.35,-3660.19 2115.01,-3656.77 2194.14,-3648.37"/>
<polygon fill="blue" stroke="blue" points="2194.8,-3651.82 2204.34,-3647.22 2194.01,-3644.87 2194.8,-3651.82"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.78,-3410.29C1793.46,-3408.28 1821.45,-3402.08 1838,-3384 1863.96,-3355.63 1964.39,-2778.62 1987.67,-2643.25"/>
<polygon fill="blue" stroke="blue" points="1991.14,-2643.69 1989.38,-2633.24 1984.24,-2642.5 1991.14,-2643.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.83,-3416.78C1803.2,-3423.45 1854.81,-3434.77 1900.37,-3444.78"/>
<polygon fill="blue" stroke="blue" points="1899.78,-3448.23 1910.3,-3446.96 1901.28,-3441.39 1899.78,-3448.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2098.26,-3481.16C2103.57,-3484.23 2108.54,-3487.81 2113,-3492 2154.21,-3530.7 2108.77,-3574.28 2149,-3614 2161.04,-3625.89 2177.88,-3632.63 2194.09,-3636.43"/>
<polygon fill="blue" stroke="blue" points="2193.57,-3639.89 2204.06,-3638.43 2194.95,-3633.03 2193.57,-3639.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn to_token_raw(unblinded_endorsement: RistrettoPoint) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Skip the Sho for this, we&#39;re hashing a single point into a single bitstring. We don&#39;t &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// need domain separa...">
<polygon fill="white" stroke="black" points="2047,-3537 1940,-3537 1940,-3501 2047,-3501 2047,-3537"/>
<text text-anchor="middle" x="1993.5" y="-3515.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token_raw</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.77,-3519C1811.1,-3519 1879.23,-3519 1929.57,-3519"/>
<polygon fill="blue" stroke="blue" points="1929.7,-3522.5 1939.7,-3519 1929.7,-3515.5 1929.7,-3522.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter&lt;&#39;_&gt;) &#45;&gt; std::fmt::Result { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.compress().fmt(f) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1421,-3375 1367,-3375 1367,-3339 1421,-3339 1421,-3375"/>
<text text-anchor="middle" x="1394" y="-3353.3" font-family="Helvetica,sans-Serif" font-size="14.00">fmt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.27,-3357C1479.04,-3357 1617.96,-3357 1693.5,-3357"/>
<polygon fill="blue" stroke="blue" points="1693.73,-3360.5 1703.73,-3357 1693.73,-3353.5 1693.73,-3360.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2047.17,-3524.19C2069.29,-3528.53 2094.2,-3536.48 2113,-3551 2138.52,-3570.71 2123.58,-3594.15 2149,-3614 2161.99,-3624.14 2178.58,-3630.47 2194.31,-3634.43"/>
<polygon fill="blue" stroke="blue" points="2193.95,-3637.93 2204.47,-3636.7 2195.48,-3631.1 2193.95,-3637.93"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(self) &#45;&gt; Result&lt;Endorsement&lt;RistrettoPoint&gt;, VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.R.decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(R) =&gt; Ok(Endorsement { R }), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Veri...">
<polygon fill="white" stroke="black" points="1444.5,-3321 1343.5,-3321 1343.5,-3285 1444.5,-3285 1444.5,-3321"/>
<text text-anchor="middle" x="1394" y="-3299.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1444.67,-3299.15C1569.29,-3292.07 1900.4,-3289.4 2113,-3438 2161.68,-3472.02 2204.48,-3527.51 2227.37,-3560.31"/>
<polygon fill="blue" stroke="blue" points="2224.73,-3562.66 2233.28,-3568.92 2230.5,-3558.7 2224.73,-3562.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1783.06,-3564.97C1821.72,-3556.49 1883.4,-3542.95 1929.84,-3532.75"/>
<polygon fill="blue" stroke="blue" points="1930.78,-3536.13 1939.8,-3530.57 1929.28,-3529.29 1930.78,-3536.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1465.5,-3483 1322.5,-3483 1322.5,-3447 1465.5,-3447 1465.5,-3483"/>
<text text-anchor="middle" x="1394" y="-3461.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1465.73,-3465C1536.66,-3465 1643.56,-3465 1702.23,-3465"/>
<polygon fill="blue" stroke="blue" points="1702.26,-3468.5 1712.26,-3465 1702.26,-3461.5 1702.26,-3468.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1465.74,-3458.64C1511.37,-3454.06 1571.9,-3447.09 1625,-3438 1653.12,-3433.19 1684.59,-3426 1708.17,-3420.26"/>
<polygon fill="blue" stroke="blue" points="1709.21,-3423.6 1718.08,-3417.81 1707.53,-3416.81 1709.21,-3423.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="1773.5,-1079 1717.5,-1079 1717.5,-1043 1773.5,-1043 1773.5,-1079"/>
<text text-anchor="middle" x="1745.5" y="-1057.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.7,-1062.64C1793.79,-1065.22 1820.56,-1071.73 1838,-1088 2093.99,-1326.73 2022.6,-1487.84 2113,-1826 2191.04,-2117.92 2231.77,-2483.55 2242.25,-2586.74"/>
<polygon fill="blue" stroke="blue" points="2238.79,-2587.35 2243.27,-2596.95 2245.75,-2586.65 2238.79,-2587.35"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="1772.5,-1133 1718.5,-1133 1718.5,-1097 1772.5,-1097 1772.5,-1133"/>
<text text-anchor="middle" x="1745.5" y="-1111.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1749.48,-1133.16C1774.98,-1288.67 1956.47,-2395.29 1987.87,-2586.8"/>
<polygon fill="blue" stroke="blue" points="1984.46,-2587.6 1989.53,-2596.9 1991.37,-2586.47 1984.46,-2587.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1772.5,-556 1718.5,-556 1718.5,-520 1772.5,-520 1772.5,-556"/>
<text text-anchor="middle" x="1745.5" y="-534.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.15,-556.15C1786.96,-578.69 1822.09,-619.39 1838,-662 1978.1,-1037.24 1991.18,-2375.17 1992.38,-2586.73"/>
<polygon fill="blue" stroke="blue" points="1988.88,-2586.75 1992.43,-2596.74 1995.88,-2586.72 1988.88,-2586.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="1773.5,-502 1717.5,-502 1717.5,-466 1773.5,-466 1773.5,-502"/>
<text text-anchor="middle" x="1745.5" y="-480.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.55,-484.53C1843.48,-487.54 2030.56,-506.24 2113,-619 2234.5,-785.19 2244.17,-2355.92 2244.93,-2586.73"/>
<polygon fill="blue" stroke="blue" points="2241.44,-2587 2244.97,-2596.98 2248.44,-2586.97 2241.44,-2587"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="1780,-797 1711,-797 1711,-761 1780,-761 1780,-797"/>
<text text-anchor="middle" x="1745.5" y="-775.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1754.91,-797.17C1773.38,-837.98 1817.49,-940.44 1838,-1031 1977.79,-1648.11 1991.12,-2428.69 1992.37,-2586.46"/>
<polygon fill="blue" stroke="blue" points="1988.87,-2586.76 1992.44,-2596.73 1995.87,-2586.71 1988.87,-2586.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1773.5,-743 1717.5,-743 1717.5,-707 1773.5,-707 1773.5,-743"/>
<text text-anchor="middle" x="1745.5" y="-721.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.73,-728.33C1793.07,-731.76 1818.88,-738.59 1838,-752 2006.89,-870.51 2040.08,-932.99 2113,-1126 2219.62,-1408.22 2241.45,-2405.99 2244.56,-2586.8"/>
<polygon fill="blue" stroke="blue" points="2241.06,-2586.9 2244.73,-2596.84 2248.06,-2586.78 2241.06,-2586.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node100"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="96,-3402 21,-3402 21,-3366 96,-3366 96,-3402"/>
<text text-anchor="middle" x="58.5" y="-3380.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node101"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="550,-3375 322,-3375 322,-3339 550,-3339 550,-3375"/>
<text text-anchor="middle" x="436" y="-3353.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M96.19,-3381.36C145.82,-3377.79 236.78,-3371.25 311.97,-3365.85"/>
<polygon fill="blue" stroke="blue" points="312.27,-3369.33 322,-3365.13 311.77,-3362.35 312.27,-3369.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node102"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="581,-3429 291,-3429 291,-3393 581,-3393 581,-3429"/>
<text text-anchor="middle" x="436" y="-3407.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M96.19,-3386.64C139.02,-3389.72 212.64,-3395.01 280.33,-3399.88"/>
<polygon fill="blue" stroke="blue" points="280.48,-3403.4 290.7,-3400.62 280.98,-3396.42 280.48,-3403.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1024,-4774 873,-4774 873,-4738 1024,-4738 1024,-4774"/>
<text text-anchor="middle" x="948.5" y="-4752.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.74,-3338.97C581.13,-3327.69 679.18,-3324.86 734,-3384 784.8,-3438.81 704.53,-4672.99 754,-4729 780.49,-4758.99 823.65,-4767.07 862.49,-4767.07"/>
<polygon fill="blue" stroke="blue" points="862.85,-4770.57 872.79,-4766.89 862.73,-4763.57 862.85,-4770.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="1021.5,-4720 875.5,-4720 875.5,-4684 1021.5,-4684 1021.5,-4720"/>
<text text-anchor="middle" x="948.5" y="-4698.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.74,-3338.98C581.12,-3327.7 679.16,-3324.88 734,-3384 782.67,-3436.47 707.01,-4618.02 754,-4672 780.9,-4702.9 825.35,-4711.36 864.87,-4711.65"/>
<polygon fill="blue" stroke="blue" points="865.1,-4715.15 875.06,-4711.55 865.03,-4708.15 865.1,-4715.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M550.08,-3356.27C614.79,-3349.3 691.35,-3328.58 734,-3273 782.67,-3209.57 701.1,-1893.95 754,-1834 767,-1819.27 784.01,-1809.83 802.57,-1804.03"/>
<polygon fill="blue" stroke="blue" points="803.69,-1807.35 812.4,-1801.32 801.83,-1800.6 803.69,-1807.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M550.07,-3356.26C614.77,-3349.29 691.33,-3328.57 734,-3273 780.86,-3211.96 703.07,-1945.69 754,-1888 765.25,-1875.26 779.5,-1866.47 795.16,-1860.58"/>
<polygon fill="blue" stroke="blue" points="796.7,-1863.76 805.08,-1857.27 794.48,-1857.12 796.7,-1863.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M550.06,-3356.25C614.76,-3349.28 691.32,-3328.56 734,-3273 779.05,-3214.36 705.04,-1997.42 754,-1942 754.53,-1941.4 755.06,-1940.82 755.6,-1940.24"/>
<polygon fill="blue" stroke="blue" points="758.16,-1942.63 762.96,-1933.19 753.32,-1937.58 758.16,-1942.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M550.09,-3356.28C614.8,-3349.31 691.36,-3328.59 734,-3273 784.48,-3207.18 699.13,-1842.21 754,-1780 759.6,-1773.65 765.95,-1768.28 772.84,-1763.76"/>
<polygon fill="blue" stroke="blue" points="775,-1766.56 781.86,-1758.49 771.46,-1760.52 775,-1766.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="1578.5,-2095 1209.5,-2095 1209.5,-2059 1578.5,-2059 1578.5,-2095"/>
<text text-anchor="middle" x="1394" y="-2073.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M550.32,-3356.12C614.89,-3349.08 691.24,-3328.33 734,-3273 766.69,-3230.7 722.93,-2354.5 754,-2311 819.29,-2219.6 1140.11,-2134.88 1300.86,-2097.34"/>
<polygon fill="blue" stroke="blue" points="1301.79,-2100.72 1310.74,-2095.05 1300.21,-2093.9 1301.79,-2100.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M581.24,-3411C665.19,-3411 769.03,-3411 844.68,-3411"/>
<polygon fill="blue" stroke="blue" points="844.7,-3414.5 854.7,-3411 844.7,-3407.5 844.7,-3414.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M521.42,-3429.07C587.57,-3447.32 677.57,-3481.82 734,-3543 752.2,-3562.74 733.23,-3582.99 754,-3600 779.45,-3620.83 813.38,-3629.76 845.72,-3632.81"/>
<polygon fill="blue" stroke="blue" points="845.46,-3636.3 855.69,-3633.57 845.99,-3629.32 845.46,-3636.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M533.22,-3429.09C599.77,-3446.73 684.88,-3480.41 734,-3543 764.95,-3582.43 717.86,-3619.26 754,-3654 795.68,-3694.06 867.64,-3692.75 911.08,-3687.39"/>
<polygon fill="blue" stroke="blue" points="911.77,-3690.83 921.21,-3686.01 910.83,-3683.89 911.77,-3690.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="1099.5,-3483 797.5,-3483 797.5,-3447 1099.5,-3447 1099.5,-3483"/>
<text text-anchor="middle" x="948.5" y="-3461.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M581.24,-3426.26C645.46,-3433.05 721.33,-3441.08 787.31,-3448.06"/>
<polygon fill="blue" stroke="blue" points="787.08,-3451.55 797.39,-3449.12 787.82,-3444.59 787.08,-3451.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="983,-997 914,-997 914,-961 983,-961 983,-997"/>
<text text-anchor="middle" x="948.5" y="-975.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="1457,-999 1331,-999 1331,-963 1457,-963 1457,-999"/>
<text text-anchor="middle" x="1394" y="-977.3" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M983.2,-979.15C1054.85,-979.48 1223.7,-980.24 1320.83,-980.67"/>
<polygon fill="blue" stroke="blue" points="1320.85,-984.17 1330.86,-980.72 1320.88,-977.17 1320.85,-984.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="1032.5,-1051 864.5,-1051 864.5,-1015 1032.5,-1015 1032.5,-1051"/>
<text text-anchor="middle" x="948.5" y="-1029.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1032.66,-1023.25C1115.59,-1013.53 1241.69,-998.74 1320.62,-989.49"/>
<polygon fill="blue" stroke="blue" points="1321.43,-992.92 1330.96,-988.27 1320.62,-985.96 1321.43,-992.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1486.5,-1133 1301.5,-1133 1301.5,-1097 1486.5,-1097 1486.5,-1133"/>
<text text-anchor="middle" x="1394" y="-1111.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1032.77,-1033.88C1066.01,-1037.04 1103.73,-1044.31 1135,-1060 1150.73,-1067.89 1147.16,-1080.33 1163,-1088 1202.36,-1107.07 1249.8,-1114.81 1291.34,-1117.4"/>
<polygon fill="blue" stroke="blue" points="1291.32,-1120.9 1301.49,-1117.94 1291.69,-1113.91 1291.32,-1120.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="1450.5,-945 1337.5,-945 1337.5,-909 1450.5,-909 1450.5,-945"/>
<text text-anchor="middle" x="1394" y="-923.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1032.6,-1036.73C1066.95,-1034.47 1105.54,-1026.62 1135,-1006 1156.5,-990.95 1141.29,-968.75 1163,-954 1210.97,-921.41 1277.9,-916.97 1327.19,-919.31"/>
<polygon fill="blue" stroke="blue" points="1327.25,-922.82 1337.43,-919.9 1327.65,-915.83 1327.25,-922.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="1455.5,-1079 1332.5,-1079 1332.5,-1043 1455.5,-1043 1455.5,-1079"/>
<text text-anchor="middle" x="1394" y="-1057.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1032.66,-1038.25C1116.07,-1043.52 1243.16,-1051.54 1321.99,-1056.52"/>
<polygon fill="blue" stroke="blue" points="1322.1,-1060.03 1332.3,-1057.17 1322.54,-1053.04 1322.1,-1060.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="976.5,-943 920.5,-943 920.5,-907 976.5,-907 976.5,-943"/>
<text text-anchor="middle" x="948.5" y="-921.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M976.58,-925.12C1045.33,-925.43 1228.19,-926.26 1327.16,-926.7"/>
<polygon fill="blue" stroke="blue" points="1327.33,-930.2 1337.35,-926.75 1327.36,-923.2 1327.33,-930.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.08,-987.13C1506.11,-988.96 1574.44,-984.6 1625,-954 1681.87,-919.58 1717.99,-846.57 1734.32,-806.59"/>
<polygon fill="blue" stroke="blue" points="1737.62,-807.77 1738.05,-797.18 1731.11,-805.19 1737.62,-807.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1486.83,-1115C1559.3,-1115 1656.53,-1115 1708.38,-1115"/>
<polygon fill="blue" stroke="blue" points="1708.42,-1118.5 1718.42,-1115 1708.42,-1111.5 1708.42,-1118.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1450.94,-925.65C1503.65,-921.23 1580.93,-906.06 1625,-857 1656.74,-821.66 1612.72,-786.86 1645,-752 1660.78,-734.96 1686.13,-728.26 1707.29,-725.79"/>
<polygon fill="blue" stroke="blue" points="1707.64,-729.27 1717.28,-724.89 1707.01,-722.3 1707.64,-729.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="1012.5,-1159 884.5,-1159 884.5,-1123 1012.5,-1123 1012.5,-1159"/>
<text text-anchor="middle" x="948.5" y="-1137.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1012.57,-1137.3C1085.15,-1133.05 1205.35,-1126 1291.21,-1120.97"/>
<polygon fill="blue" stroke="blue" points="1291.47,-1124.46 1301.25,-1120.38 1291.06,-1117.47 1291.47,-1124.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1455.88,-1061C1528.39,-1061 1647.22,-1061 1707.27,-1061"/>
<polygon fill="blue" stroke="blue" points="1707.43,-1064.5 1717.43,-1061 1707.43,-1057.5 1707.43,-1064.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="981.5,-1105 915.5,-1105 915.5,-1069 981.5,-1069 981.5,-1105"/>
<text text-anchor="middle" x="948.5" y="-1083.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M981.75,-1085.11C1052.89,-1080.94 1224.65,-1070.87 1322.21,-1065.15"/>
<polygon fill="blue" stroke="blue" points="1322.5,-1068.64 1332.28,-1064.56 1322.09,-1061.65 1322.5,-1068.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="1107,-189 790,-189 790,-153 1107,-153 1107,-189"/>
<text text-anchor="middle" x="948.5" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1090.45,-189.01C1114.64,-192.05 1139.54,-195.14 1163,-198 1231.5,-206.35 1311.53,-215.64 1356.84,-220.86"/>
<polygon fill="blue" stroke="blue" points="1356.44,-224.33 1366.78,-222 1357.24,-217.38 1356.44,-224.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1107.11,-171C1193.89,-171 1295,-171 1350.72,-171"/>
<polygon fill="blue" stroke="blue" points="1350.91,-174.5 1360.91,-171 1350.91,-167.5 1350.91,-174.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M976.64,-273.6C1017.62,-267.19 1094.76,-262.32 1135,-306 1202.43,-379.2 1090.46,-684.86 1163,-753 1237.83,-823.29 1523.01,-764.79 1625,-753 1653.03,-749.76 1684.03,-742.38 1707.43,-736.01"/>
<polygon fill="blue" stroke="blue" points="1708.59,-739.32 1717.29,-733.27 1706.72,-732.58 1708.59,-739.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="569,-243 303,-243 303,-207 569,-207 569,-243"/>
<text text-anchor="middle" x="436" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.05,-236C620.56,-240.56 680.08,-246.14 734,-252 795.8,-258.72 867.47,-268.11 910.06,-273.86"/>
<polygon fill="blue" stroke="blue" points="909.86,-277.37 920.24,-275.24 910.8,-270.43 909.86,-277.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="1025.5,-135 871.5,-135 871.5,-99 1025.5,-99 1025.5,-135"/>
<text text-anchor="middle" x="948.5" y="-113.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.12,-242.44C625.07,-242.87 687.85,-233.33 734,-198 754.32,-182.44 734.06,-160.04 754,-144 783.72,-120.1 824.65,-111.98 861.22,-110.4"/>
<polygon fill="blue" stroke="blue" points="861.51,-113.89 871.41,-110.12 861.32,-106.9 861.51,-113.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.12,-207.56C625.07,-207.13 687.85,-216.67 734,-252 754.32,-267.56 734.06,-289.96 754,-306 796.12,-339.88 860.78,-342.04 903.6,-338.85"/>
<polygon fill="blue" stroke="blue" points="904.07,-342.32 913.72,-337.96 903.46,-335.34 904.07,-342.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.14,-239.81C1469.49,-268.63 1572.73,-337.14 1625,-424 1645.46,-457.99 1617.5,-482.4 1645,-511 1661.31,-527.96 1687.12,-534.62 1708.36,-537.09"/>
<polygon fill="blue" stroke="blue" points="1708.09,-540.58 1718.36,-537.99 1708.71,-533.61 1708.09,-540.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="577,-189 295,-189 295,-153 577,-153 577,-189"/>
<text text-anchor="middle" x="436" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M577.01,-153.57C630.91,-154.08 690.01,-164.32 734,-198 754.32,-213.56 734.06,-235.96 754,-252 798.35,-287.67 867.68,-288.18 910.2,-284.3"/>
<polygon fill="blue" stroke="blue" points="910.82,-287.75 920.4,-283.23 910.09,-280.79 910.82,-287.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M577.17,-156.17C667.99,-146.57 783.4,-134.36 861.04,-126.15"/>
<polygon fill="blue" stroke="blue" points="861.68,-129.6 871.26,-125.06 860.95,-122.64 861.68,-129.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M527.53,-152.98C593.02,-145.54 679.28,-148.12 734,-198 770.08,-230.89 718.72,-272.26 754,-306 793.49,-343.77 859.89,-344.7 903.71,-340.19"/>
<polygon fill="blue" stroke="blue" points="904.26,-343.65 913.79,-339.02 903.45,-336.7 904.26,-343.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1065.5,-243 831.5,-243 831.5,-207 1065.5,-207 1065.5,-243"/>
<text text-anchor="middle" x="948.5" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1065.73,-225C1162.29,-225 1293.66,-225 1356.54,-225"/>
<polygon fill="blue" stroke="blue" points="1356.74,-228.5 1366.74,-225 1356.74,-221.5 1356.74,-228.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1065.54,-210.13C1097.15,-206.14 1131.38,-201.85 1163,-198 1228.53,-190.01 1304.63,-181.16 1350.77,-175.84"/>
<polygon fill="blue" stroke="blue" points="1351.46,-179.29 1360.99,-174.67 1350.66,-172.33 1351.46,-179.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1025.82,-112.67C1061.86,-114.26 1103.71,-121.73 1135,-144 1157.03,-159.67 1140.76,-182.63 1163,-198 1221.24,-238.24 1308.17,-235.9 1356.78,-230.52"/>
<polygon fill="blue" stroke="blue" points="1357.32,-233.97 1366.83,-229.3 1356.48,-227.03 1357.32,-233.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1025.74,-126.28C1119.76,-137.73 1276.27,-156.79 1350.91,-165.88"/>
<polygon fill="blue" stroke="blue" points="1350.53,-169.36 1360.88,-167.09 1351.38,-162.41 1350.53,-169.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="544,-351 328,-351 328,-315 544,-315 544,-351"/>
<text text-anchor="middle" x="436" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M544.32,-324.16C600.81,-319.27 671.2,-312.82 734,-306 795.8,-299.28 867.47,-289.89 910.06,-284.14"/>
<polygon fill="blue" stroke="blue" points="910.8,-287.57 920.24,-282.76 909.86,-280.63 910.8,-287.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M520.91,-351.01C587.67,-360 678.77,-359.49 734,-306 786.12,-255.53 703.11,-195.7 754,-144 781.41,-116.15 823.34,-107.9 861.17,-107.25"/>
<polygon fill="blue" stroke="blue" points="861.2,-110.75 871.2,-107.24 861.2,-103.75 861.2,-110.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M544.02,-333C655.52,-333 824.78,-333 903.89,-333"/>
<polygon fill="blue" stroke="blue" points="903.98,-336.5 913.98,-333 903.98,-329.5 903.98,-336.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1427.29,-165.37C1475.47,-158.86 1566.73,-154.08 1625,-198 1709.75,-261.89 1734.84,-397.08 1741.9,-455.8"/>
<polygon fill="blue" stroke="blue" points="1738.43,-456.29 1743.01,-465.84 1745.39,-455.51 1738.43,-456.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M976,-351.19C1017.96,-381.66 1098.64,-447.35 1135,-525 1159.55,-577.43 1119.92,-745.33 1163,-784 1241.47,-854.45 1579.12,-806.59 1700.68,-786.6"/>
<polygon fill="blue" stroke="blue" points="1701.46,-790.02 1710.75,-784.92 1700.31,-783.11 1701.46,-790.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="573.5,-297 298.5,-297 298.5,-261 573.5,-261 573.5,-297"/>
<text text-anchor="middle" x="436" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M573.8,-279C687.02,-279 840.17,-279 910.01,-279"/>
<polygon fill="blue" stroke="blue" points="910.08,-282.5 920.08,-279 910.08,-275.5 910.08,-282.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M527.53,-297.02C593.02,-304.46 679.28,-301.88 734,-252 770.08,-219.11 718.72,-177.74 754,-144 782.01,-117.21 823.56,-108.96 860.99,-108.03"/>
<polygon fill="blue" stroke="blue" points="861.45,-111.53 871.42,-107.95 861.39,-104.53 861.45,-111.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M573.87,-290.43C624.25,-294.9 681.76,-300.32 734,-306 792.85,-312.39 860.63,-321.22 903.75,-327.01"/>
<polygon fill="blue" stroke="blue" points="903.51,-330.51 913.89,-328.38 904.45,-323.57 903.51,-330.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M976.81,-1227.38C1091.54,-1240.92 1532.72,-1286.2 1625,-1194 1659.78,-1159.25 1614.26,-790.36 1645,-752 1659.72,-733.63 1685.56,-727.01 1707.23,-724.91"/>
<polygon fill="blue" stroke="blue" points="1707.72,-728.39 1717.46,-724.22 1707.24,-721.41 1707.72,-728.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M983.06,-1278.4C1113.05,-1279.64 1578.51,-1280.89 1625,-1236 1657.93,-1204.21 1634.27,-1075.5 1645,-1031 1665.5,-946.01 1708.68,-851.6 1730.8,-806.24"/>
<polygon fill="blue" stroke="blue" points="1734.04,-807.59 1735.31,-797.08 1727.76,-804.5 1734.04,-807.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1012.59,-1389.07C1160.58,-1395.09 1525.1,-1402.73 1625,-1338 1694.89,-1292.72 1726.8,-1192.2 1738.66,-1143.09"/>
<polygon fill="blue" stroke="blue" points="1742.11,-1143.69 1740.95,-1133.16 1735.29,-1142.11 1742.11,-1143.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M981.75,-1331.89C1109.91,-1331.13 1578.49,-1325.28 1625,-1280 1655.74,-1250.08 1617.21,-1120.68 1645,-1088 1660.15,-1070.19 1685.74,-1063.53 1707.18,-1061.27"/>
<polygon fill="blue" stroke="blue" points="1707.61,-1064.75 1717.31,-1060.49 1707.07,-1057.77 1707.61,-1064.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M975.52,-613.57C1015.36,-618.95 1091.42,-622.6 1135,-582 1177.61,-542.31 1117.64,-490.51 1163,-454 1202.99,-421.81 1583.12,-424.31 1625,-454 1646.9,-469.53 1625.34,-492.72 1645,-511 1662.04,-526.85 1687.44,-533.56 1708.31,-536.33"/>
<polygon fill="blue" stroke="blue" points="1708.12,-539.83 1718.44,-537.43 1708.87,-532.87 1708.12,-539.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M970.38,-536.92C1006.61,-506.87 1084.78,-447.8 1163,-426 1360.8,-370.88 1424.89,-380 1625,-426 1654.76,-432.84 1685.71,-448.12 1708.65,-461.28"/>
<polygon fill="blue" stroke="blue" points="1706.95,-464.34 1717.34,-466.39 1710.49,-458.31 1706.95,-464.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M968.39,-735.06C1003.37,-767.11 1082.09,-832.84 1163,-857 1261.37,-886.38 1526.6,-886.27 1625,-857 1659.9,-846.62 1694.11,-822.45 1716.92,-803.75"/>
<polygon fill="blue" stroke="blue" points="1719.38,-806.25 1724.79,-797.14 1714.88,-800.89 1719.38,-806.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M976.75,-658.69C1016.47,-654.03 1090.39,-651.78 1135,-690 1167.13,-717.53 1128.96,-755.86 1163,-781 1245.58,-841.99 1534.1,-828.73 1625,-781 1638.86,-773.72 1632.22,-761.05 1645,-752 1663.29,-739.05 1687.48,-732.31 1707.43,-728.8"/>
<polygon fill="blue" stroke="blue" points="1708.08,-732.25 1717.43,-727.25 1707.01,-725.33 1708.08,-732.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="997.5,-4470 899.5,-4470 899.5,-4434 997.5,-4434 997.5,-4470"/>
<text text-anchor="middle" x="948.5" y="-4448.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="1429,-4583 1359,-4583 1359,-4547 1429,-4547 1429,-4583"/>
<text text-anchor="middle" x="1394" y="-4561.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M997.81,-4464.31C1084.55,-4486.41 1265.44,-4532.5 1348.97,-4553.78"/>
<polygon fill="blue" stroke="blue" points="1348.35,-4557.24 1358.9,-4556.31 1350.08,-4550.45 1348.35,-4557.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="1429,-4857 1359,-4857 1359,-4821 1429,-4821 1429,-4857"/>
<text text-anchor="middle" x="1394" y="-4835.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1024.23,-4769.99C1117.13,-4787.37 1272.67,-4816.48 1348.6,-4830.69"/>
<polygon fill="blue" stroke="blue" points="1348.29,-4834.19 1358.77,-4832.59 1349.58,-4827.31 1348.29,-4834.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1021.7,-4694.29C1056.38,-4689.59 1098.28,-4682.43 1135,-4672 1213,-4649.85 1299.19,-4610.98 1349.58,-4586.69"/>
<polygon fill="blue" stroke="blue" points="1351.4,-4589.69 1358.87,-4582.18 1348.34,-4583.4 1351.4,-4589.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M986.07,-3566.76C1028.05,-3561.87 1096.11,-3561.33 1135,-3600 1193.97,-3658.63 1099.95,-3730.78 1163,-3785 1240.84,-3851.94 1536.35,-3836.79 1625,-3785 1693.68,-3744.87 1725.97,-3649.11 1738.25,-3601.25"/>
<polygon fill="blue" stroke="blue" points="1741.72,-3601.8 1740.7,-3591.25 1734.92,-3600.13 1741.72,-3601.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1042.2,-3402.95C1075.58,-3405.09 1110.91,-3413.99 1135,-3438 1194.83,-3497.64 1099.02,-3570.84 1163,-3626 1201.88,-3659.52 1586.11,-3659.51 1625,-3626 1670.61,-3586.69 1604.98,-3536.99 1645,-3492 1659.35,-3475.87 1682.27,-3468.94 1702.49,-3466.13"/>
<polygon fill="blue" stroke="blue" points="1702.9,-3469.61 1712.46,-3465.03 1702.13,-3462.65 1702.9,-3469.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1041.18,-3625.28C1072.94,-3628.43 1107.45,-3636.38 1135,-3654 1154.21,-3666.29 1142.95,-3686.13 1163,-3697 1343.51,-3794.87 1472.92,-3834.96 1625,-3697 1658.9,-3666.25 1615.46,-3526.96 1645,-3492 1658.93,-3475.51 1681.83,-3468.56 1702.14,-3465.83"/>
<polygon fill="blue" stroke="blue" points="1702.58,-3469.3 1712.16,-3464.78 1701.85,-3462.34 1702.58,-3469.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M990.03,-3350.18C1032.36,-3345.59 1097.67,-3346.08 1135,-3384 1202.91,-3452.98 1090.28,-3536.1 1163,-3600 1201.56,-3633.88 1587.07,-3634.58 1625,-3600 1660.62,-3567.52 1613.98,-3420.9 1645,-3384 1657.05,-3369.67 1675.87,-3362.54 1693.91,-3359.12"/>
<polygon fill="blue" stroke="blue" points="1694.47,-3362.58 1703.81,-3357.58 1693.39,-3355.66 1694.47,-3362.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M976.74,-3514.05C1017.14,-3508.43 1092.7,-3504.77 1135,-3546 1187.64,-3597.31 1106.8,-3661.63 1163,-3709 1241.5,-3775.17 1548.11,-3777.03 1625,-3709 1679.66,-3660.63 1597.21,-3601.16 1645,-3546 1660.31,-3528.33 1685.9,-3521.66 1707.3,-3519.37"/>
<polygon fill="blue" stroke="blue" points="1707.71,-3522.85 1717.4,-3518.57 1707.15,-3515.87 1707.71,-3522.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M975.51,-3688.96C1075.67,-3717.86 1440.13,-3806.35 1625,-3626 1655.07,-3596.66 1617.74,-3469.97 1645,-3438 1660.37,-3419.97 1686.44,-3413.37 1708.04,-3411.19"/>
<polygon fill="blue" stroke="blue" points="1708.5,-3414.67 1718.22,-3410.45 1707.99,-3407.69 1708.5,-3414.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1099.5,-3469.16C1112.66,-3474.52 1124.82,-3481.93 1135,-3492 1192.24,-3548.63 1101.82,-3618.65 1163,-3671 1202,-3704.38 1586.74,-3705.22 1625,-3671 1654.83,-3644.32 1618.95,-3522.39 1645,-3492 1659.05,-3475.61 1681.95,-3468.67 1702.24,-3465.91"/>
<polygon fill="blue" stroke="blue" points="1702.67,-3469.39 1712.25,-3464.85 1701.93,-3462.43 1702.67,-3469.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;pub fn decompress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement&lt;curve25519_dalek_signal::RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ZkGroupDeserializationFailure, &#160;&#160;&#160;&#160;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GroupSendEndorsem...">
<polygon fill="white" stroke="black" points="999,-3321 898,-3321 898,-3285 999,-3285 999,-3321"/>
<text text-anchor="middle" x="948.5" y="-3299.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.08,-3303C1081.16,-3303 1244.96,-3303 1333.27,-3303"/>
<polygon fill="blue" stroke="blue" points="1333.4,-3306.5 1343.4,-3303 1333.4,-3299.5 1333.4,-3306.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="1773.5,-1956 1717.5,-1956 1717.5,-1920 1773.5,-1920 1773.5,-1956"/>
<text text-anchor="middle" x="1745.5" y="-1934.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1076.29,-1825.03C1095.96,-1827.95 1116.03,-1831 1135,-1834 1352.17,-1868.33 1611.99,-1914.3 1707.2,-1931.31"/>
<polygon fill="blue" stroke="blue" points="1706.74,-1934.78 1717.2,-1933.1 1707.97,-1927.89 1706.74,-1934.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="1772.5,-2226 1718.5,-2226 1718.5,-2190 1772.5,-2190 1772.5,-2226"/>
<text text-anchor="middle" x="1745.5" y="-2204.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1084.73,-1811.01C1102.74,-1815.9 1120.1,-1823.23 1135,-1834 1157.55,-1850.3 1141.04,-1872.91 1163,-1890 1328.89,-2019.06 1484.8,-1834.41 1625,-1991 1681.64,-2054.26 1589.95,-2116.35 1645,-2181 1660.36,-2199.04 1686.43,-2205.64 1708.03,-2207.81"/>
<polygon fill="blue" stroke="blue" points="1707.98,-2211.32 1718.21,-2208.55 1708.49,-2204.34 1707.98,-2211.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="975.5,-2095 921.5,-2095 921.5,-2059 975.5,-2059 975.5,-2095"/>
<text text-anchor="middle" x="948.5" y="-2073.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1421,-2413 1367,-2413 1367,-2377 1421,-2377 1421,-2413"/>
<text text-anchor="middle" x="1394" y="-2391.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M966.09,-2095.09C1000.42,-2133.1 1080.59,-2224.88 1135,-2311 1150.08,-2334.86 1139.96,-2351.7 1163,-2368 1220.8,-2408.87 1307.9,-2406.29 1356.65,-2400.7"/>
<polygon fill="blue" stroke="blue" points="1357.25,-2404.15 1366.73,-2399.44 1356.37,-2397.21 1357.25,-2404.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="1101,-1987 796,-1987 796,-1951 1101,-1951 1101,-1987"/>
<text text-anchor="middle" x="948.5" y="-1965.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1101.17,-1981.01C1113.01,-1984.94 1124.45,-1989.86 1135,-1996 1152.52,-2006.2 1145.74,-2021.38 1163,-2032 1179.16,-2041.94 1197.06,-2049.75 1215.53,-2055.88"/>
<polygon fill="blue" stroke="blue" points="1214.65,-2059.27 1225.24,-2058.93 1216.75,-2052.59 1214.65,-2059.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="1773.5,-2334 1717.5,-2334 1717.5,-2298 1773.5,-2298 1773.5,-2334"/>
<text text-anchor="middle" x="1745.5" y="-2312.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1091.83,-1861.01C1108.15,-1866.64 1123.15,-1875.24 1135,-1888 1194.6,-1952.14 1100.75,-2219.43 1163,-2281 1172.72,-2290.61 1580.66,-2308.95 1707.36,-2314.42"/>
<polygon fill="blue" stroke="blue" points="1707.22,-2317.92 1717.37,-2314.85 1707.52,-2310.92 1707.22,-2317.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="1772.5,-2280 1718.5,-2280 1718.5,-2244 1772.5,-2244 1772.5,-2280"/>
<text text-anchor="middle" x="1745.5" y="-2258.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1119.83,-1933.07C1125.08,-1935.73 1130.16,-1938.7 1135,-1942 1155.73,-1956.12 1142.15,-1977.06 1163,-1991 1335.08,-2106.05 1480.05,-1902.22 1625,-2050 1653.96,-2079.52 1618.15,-2203.55 1645,-2235 1660.38,-2253.01 1686.45,-2259.62 1708.05,-2261.8"/>
<polygon fill="blue" stroke="blue" points="1708,-2265.3 1718.22,-2262.54 1708.51,-2258.32 1708,-2265.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="1772.5,-2064 1718.5,-2064 1718.5,-2028 1772.5,-2028 1772.5,-2064"/>
<text text-anchor="middle" x="1745.5" y="-2042.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1094.4,-1771.04C1108.2,-1773.67 1121.92,-1776.65 1135,-1780 1360.19,-1837.74 1461.81,-1797.44 1625,-1963 1643.55,-1981.82 1625.6,-2001.06 1645,-2019 1662.09,-2034.8 1687.49,-2041.52 1708.35,-2044.3"/>
<polygon fill="blue" stroke="blue" points="1708.15,-2047.8 1718.47,-2045.4 1708.9,-2040.84 1708.15,-2047.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node164"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="1772.5,-2172 1718.5,-2172 1718.5,-2136 1772.5,-2136 1772.5,-2172"/>
<text text-anchor="middle" x="1745.5" y="-2150.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1039.89,-1695.47C1072.41,-1698.28 1107.76,-1706.46 1135,-1726 1157.29,-1741.99 1141.36,-1764.15 1163,-1781 1329.13,-1910.38 1486.94,-1727.01 1625,-1886 1660.24,-1926.58 1610.61,-2085.7 1645,-2127 1660.16,-2145.2 1686.23,-2151.8 1707.89,-2153.93"/>
<polygon fill="blue" stroke="blue" points="1707.88,-2157.44 1718.1,-2154.65 1708.37,-2150.45 1707.88,-2157.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="1773.5,-2118 1717.5,-2118 1717.5,-2082 1773.5,-2082 1773.5,-2118"/>
<text text-anchor="middle" x="1745.5" y="-2096.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1578.71,-2089.09C1627.66,-2092.31 1675.68,-2095.47 1707.34,-2097.55"/>
<polygon fill="blue" stroke="blue" points="1707.21,-2101.05 1717.42,-2098.22 1707.67,-2094.07 1707.21,-2101.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="1012.5,-2041 884.5,-2041 884.5,-2005 1012.5,-2005 1012.5,-2041"/>
<text text-anchor="middle" x="948.5" y="-2019.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="1422,-2359 1366,-2359 1366,-2323 1422,-2323 1422,-2359"/>
<text text-anchor="middle" x="1394" y="-2337.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1012.87,-2014.25C1053.48,-2012.46 1104.17,-2018.01 1135,-2050 1215.35,-2133.36 1082.39,-2225.89 1163,-2309 1212.89,-2360.44 1304.39,-2355.87 1355.66,-2348.28"/>
<polygon fill="blue" stroke="blue" points="1356.33,-2351.71 1365.65,-2346.68 1355.23,-2344.8 1356.33,-2351.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="1773.5,-2010 1717.5,-2010 1717.5,-1974 1773.5,-1974 1773.5,-2010"/>
<text text-anchor="middle" x="1745.5" y="-1988.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1046.06,-1655.12C1074.92,-1659.2 1106.46,-1664.71 1135,-1672 1360.09,-1729.5 1475.92,-1675.82 1625,-1854 1657.17,-1892.45 1611.12,-1928.05 1645,-1965 1660.7,-1982.12 1686.05,-1988.82 1707.23,-1991.27"/>
<polygon fill="blue" stroke="blue" points="1706.96,-1994.76 1717.23,-1992.15 1707.58,-1987.78 1706.96,-1994.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="1772.5,-1902 1718.5,-1902 1718.5,-1866 1772.5,-1866 1772.5,-1902"/>
<text text-anchor="middle" x="1745.5" y="-1880.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1089.53,-1574.94C1244.03,-1565.75 1488.81,-1577.96 1625,-1723 1666.22,-1766.9 1604.98,-1812.01 1645,-1857 1660.74,-1874.7 1686.8,-1881.31 1708.3,-1883.58"/>
<polygon fill="blue" stroke="blue" points="1708.18,-1887.08 1718.42,-1884.37 1708.73,-1880.1 1708.18,-1887.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="1773.5,-1848 1717.5,-1848 1717.5,-1812 1773.5,-1812 1773.5,-1848"/>
<text text-anchor="middle" x="1745.5" y="-1826.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1016.72,-1518.95C1146.8,-1488.24 1436.67,-1440.71 1625,-1568 1705.77,-1622.59 1732.83,-1746.03 1741.14,-1801.76"/>
<polygon fill="blue" stroke="blue" points="1737.71,-1802.54 1742.56,-1811.96 1744.64,-1801.58 1737.71,-1802.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="1433.5,-2246 1354.5,-2246 1354.5,-2210 1433.5,-2210 1433.5,-2246"/>
<text text-anchor="middle" x="1394" y="-2224.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1433.74,-2235.03C1479.85,-2243.84 1558.91,-2260.3 1625,-2281 1634.14,-2283.86 1635.92,-2285.96 1645,-2289 1665.43,-2295.83 1688.65,-2302.21 1707.51,-2307.05"/>
<polygon fill="blue" stroke="blue" points="1706.67,-2310.44 1717.22,-2309.5 1708.38,-2303.66 1706.67,-2310.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1433.74,-2225.78C1501.75,-2221.89 1641.71,-2213.88 1708.06,-2210.09"/>
<polygon fill="blue" stroke="blue" points="1708.65,-2213.56 1718.44,-2209.49 1708.25,-2206.57 1708.65,-2213.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<path fill="none" stroke="blue" d="M1420.42,-4820.96C1482.18,-4777.14 1640.2,-4665.01 1710.22,-4615.32"/>
<polygon fill="blue" stroke="blue" points="1712.58,-4617.94 1718.71,-4609.3 1708.53,-4612.24 1712.58,-4617.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="1051,-4857 846,-4857 846,-4821 1051,-4821 1051,-4857"/>
<text text-anchor="middle" x="948.5" y="-4835.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1051.25,-4839C1145.02,-4839 1279.76,-4839 1348.7,-4839"/>
<polygon fill="blue" stroke="blue" points="1348.78,-4842.5 1358.78,-4839 1348.78,-4835.5 1348.78,-4842.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.9,-2264.02C1792.82,-2266.8 1819.75,-2273.39 1838,-2289 1933.16,-2370.39 1973.92,-2523.49 1987.21,-2586.65"/>
<polygon fill="blue" stroke="blue" points="1983.82,-2587.57 1989.24,-2596.68 1990.68,-2586.18 1983.82,-2587.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.69,-1884.78C1793.32,-1886.84 1821.29,-1893.06 1838,-1911 1932.8,-2012.78 1979.46,-2468.68 1990.1,-2586.92"/>
<polygon fill="blue" stroke="blue" points="1986.63,-2587.33 1990.99,-2596.98 1993.6,-2586.71 1986.63,-2587.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.82,-2047.11C1793.24,-2049.37 1820.86,-2055.7 1838,-2073 1984.6,-2220.96 1994.22,-2497.61 1993.3,-2586.63"/>
<polygon fill="blue" stroke="blue" points="1989.8,-2586.71 1993.14,-2596.77 1996.8,-2586.82 1989.8,-2586.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.87,-1828.16C1842.16,-1825.21 2021.12,-1827.76 2113,-1926 2205.18,-2024.56 2236.68,-2468.77 2243.48,-2586.36"/>
<polygon fill="blue" stroke="blue" points="2240.01,-2586.91 2244.07,-2596.7 2247,-2586.52 2240.01,-2586.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.53,-1934.39C1841.03,-1927.02 2018.32,-1918.06 2113,-2011 2197.05,-2093.51 2234,-2478.45 2242.84,-2586.64"/>
<polygon fill="blue" stroke="blue" points="2239.36,-2587.1 2243.65,-2596.79 2246.34,-2586.54 2239.36,-2587.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.68,-2328.26C1835.81,-2356.73 1992.21,-2430.97 2113,-2510 2150.75,-2534.7 2190.87,-2567.7 2216.84,-2590.06"/>
<polygon fill="blue" stroke="blue" points="2214.57,-2592.73 2224.42,-2596.64 2219.16,-2587.44 2214.57,-2592.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.9,-1995.07C1842.26,-2004.25 2021.36,-2037.84 2113,-2145 2227.95,-2279.42 2243.21,-2507.01 2244.92,-2586.54"/>
<polygon fill="blue" stroke="blue" points="2241.42,-2586.82 2245.08,-2596.76 2248.42,-2586.71 2241.42,-2586.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.52,-2155.41C1792.77,-2157.85 1820.32,-2164.26 1838,-2181 1899.76,-2239.45 1965.51,-2500.21 1986.02,-2586.89"/>
<polygon fill="blue" stroke="blue" points="1982.65,-2587.86 1988.34,-2596.8 1989.47,-2586.26 1982.65,-2587.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.73,-2209.68C1792.83,-2212.27 1820.07,-2218.77 1838,-2235 1945.74,-2332.55 1979.89,-2516.06 1989.31,-2586.49"/>
<polygon fill="blue" stroke="blue" points="1985.88,-2587.31 1990.61,-2596.79 1992.83,-2586.43 1985.88,-2587.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1773.78,-2104.72C1792.66,-2108.76 1817.91,-2115.75 1838,-2127 1981.61,-2207.4 2010.81,-2245.99 2113,-2375 2168.29,-2444.8 2213.32,-2540.9 2233.52,-2587.48"/>
<polygon fill="blue" stroke="blue" points="2230.4,-2589.09 2237.56,-2596.9 2236.83,-2586.33 2230.4,-2589.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.04,-2393.41C1467.87,-2392.02 1566.83,-2395.95 1625,-2448 1645.01,-2465.9 1625.34,-2486.72 1645,-2505 1662.04,-2520.85 1687.44,-2527.56 1708.31,-2530.33"/>
<polygon fill="blue" stroke="blue" points="1708.12,-2533.83 1718.44,-2531.43 1708.87,-2526.87 1708.12,-2533.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1422.3,-2338.93C1466.91,-2336.68 1557.22,-2336.88 1625,-2368 1666.39,-2387 1703.12,-2425.82 1724.6,-2451.88"/>
<polygon fill="blue" stroke="blue" points="1722.02,-2454.26 1731.02,-2459.85 1727.47,-2449.87 1722.02,-2454.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="1006,-2386 891,-2386 891,-2350 1006,-2350 1006,-2386"/>
<text text-anchor="middle" x="948.5" y="-2364.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1006.12,-2371.45C1098.57,-2377.08 1279.35,-2388.08 1356.59,-2392.78"/>
<polygon fill="blue" stroke="blue" points="1356.59,-2396.29 1366.78,-2393.4 1357.02,-2389.3 1356.59,-2396.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1006.12,-2364.55C1098.12,-2358.95 1277.6,-2348.03 1355.47,-2343.29"/>
<polygon fill="blue" stroke="blue" points="1355.99,-2346.76 1365.76,-2342.66 1355.57,-2339.77 1355.99,-2346.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1024.5,-4637 872.5,-4637 872.5,-4601 1024.5,-4601 1024.5,-4637"/>
<text text-anchor="middle" x="948.5" y="-4615.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1024.73,-4609.84C1117.73,-4598.52 1272.96,-4579.62 1348.7,-4570.39"/>
<polygon fill="blue" stroke="blue" points="1349.35,-4573.84 1358.85,-4569.16 1348.5,-4566.89 1349.35,-4573.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M1429.15,-4562.26C1487.06,-4557.62 1605.44,-4548.14 1679.54,-4542.2"/>
<polygon fill="blue" stroke="blue" points="1680.01,-4545.68 1689.69,-4541.39 1679.45,-4538.7 1680.01,-4545.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="1024.5,-4583 872.5,-4583 872.5,-4547 1024.5,-4547 1024.5,-4583"/>
<text text-anchor="middle" x="948.5" y="-4561.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1024.73,-4565C1117.73,-4565 1272.96,-4565 1348.7,-4565"/>
<polygon fill="blue" stroke="blue" points="1348.85,-4568.5 1358.85,-4565 1348.85,-4561.5 1348.85,-4568.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1431,-556 1357,-556 1357,-520 1431,-520 1431,-556"/>
<text text-anchor="middle" x="1394" y="-534.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.13,-533.97C1478.79,-530.42 1563.8,-530.29 1625,-565 1637.68,-572.19 1632.96,-582.78 1645,-591 1718.78,-641.34 1754.38,-615.62 1838,-647 1964.22,-694.37 2036.5,-663.99 2113,-775 2220.34,-930.76 2241.98,-2366.22 2244.68,-2586.65"/>
<polygon fill="blue" stroke="blue" points="2241.18,-2586.8 2244.8,-2596.76 2248.18,-2586.72 2241.18,-2586.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.12,-530.79C1481.14,-523.05 1571.4,-517.59 1625,-565 1653.1,-589.85 1618.53,-620.41 1645,-647 1707.36,-709.64 1780.81,-627.6 1838,-695 1966.06,-845.91 1989.4,-2359.77 1992.18,-2586.62"/>
<polygon fill="blue" stroke="blue" points="1988.68,-2586.76 1992.3,-2596.72 1995.68,-2586.67 1988.68,-2586.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.09,-538C1498.13,-538 1641.19,-538 1708.31,-538"/>
<polygon fill="blue" stroke="blue" points="1708.41,-541.5 1718.41,-538 1708.41,-534.5 1708.41,-541.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.02,-534.96C1476.44,-530.85 1556.84,-522.67 1625,-511 1652.76,-506.25 1683.77,-499.19 1707.24,-493.48"/>
<polygon fill="blue" stroke="blue" points="1708.26,-496.83 1717.14,-491.05 1706.59,-490.04 1708.26,-496.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.17,-529.98C1482.1,-521.03 1574.37,-513.85 1625,-565 1654.4,-594.7 1617.88,-720.2 1645,-752 1658.65,-768 1680.73,-775 1700.63,-777.89"/>
<polygon fill="blue" stroke="blue" points="1700.45,-781.4 1710.79,-779.06 1701.25,-774.44 1700.45,-781.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.23,-530.27C1481.82,-521.8 1573.2,-515.33 1625,-565 1665.61,-603.94 1608.94,-646.81 1645,-690 1660.33,-708.36 1685.92,-717.1 1707.31,-721.25"/>
<polygon fill="blue" stroke="blue" points="1706.97,-724.74 1717.41,-722.94 1708.13,-717.84 1706.97,-724.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node174"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="1617,-502 1171,-502 1171,-466 1617,-466 1617,-502"/>
<text text-anchor="middle" x="1394" y="-480.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1565.79,-502.02C1585.8,-504.73 1605.88,-507.73 1625,-511 1653.12,-515.81 1684.59,-523 1708.17,-528.74"/>
<polygon fill="blue" stroke="blue" points="1707.53,-532.19 1718.08,-531.19 1709.21,-525.4 1707.53,-532.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1617.33,-484C1652.12,-484 1684.19,-484 1707.42,-484"/>
<polygon fill="blue" stroke="blue" points="1707.45,-487.5 1717.45,-484 1707.45,-480.5 1707.45,-487.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1615.32,-502.12C1618.69,-504.86 1621.93,-507.82 1625,-511 1662.35,-549.64 1610.61,-710.7 1645,-752 1658.46,-768.16 1680.53,-775.18 1700.47,-778.04"/>
<polygon fill="blue" stroke="blue" points="1700.31,-781.54 1710.64,-779.18 1701.09,-774.58 1700.31,-781.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1613.66,-502.14C1617.59,-504.87 1621.38,-507.81 1625,-511 1652.52,-535.2 1629.33,-557.87 1645,-591 1664.45,-632.13 1697.47,-673.21 1720.1,-698.83"/>
<polygon fill="blue" stroke="blue" points="1717.77,-701.48 1727.05,-706.59 1722.98,-696.81 1717.77,-701.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node175"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1581.5,-718 1206.5,-718 1206.5,-682 1581.5,-682 1581.5,-718"/>
<text text-anchor="middle" x="1394" y="-696.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1420.22,-718.14C1464.5,-750.67 1557.87,-822.32 1625,-895 1666.63,-940.06 1706.49,-999.9 1728.02,-1034.05"/>
<polygon fill="blue" stroke="blue" points="1725.32,-1036.34 1733.59,-1042.97 1731.26,-1032.64 1725.32,-1036.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1429.97,-718.1C1482.51,-747.38 1580.42,-810.5 1625,-895 1645.12,-933.14 1617.07,-1055.15 1645,-1088 1660.34,-1106.05 1686.41,-1112.65 1708.02,-1114.82"/>
<polygon fill="blue" stroke="blue" points="1707.98,-1118.33 1718.2,-1115.56 1708.48,-1111.34 1707.98,-1118.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1474.74,-718.03C1544.92,-733.89 1644.46,-756.39 1700.94,-769.15"/>
<polygon fill="blue" stroke="blue" points="1700.44,-772.63 1710.96,-771.42 1701.98,-765.8 1700.44,-772.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.52,-713.34C1629.39,-716.77 1676.08,-720.11 1707.12,-722.33"/>
<polygon fill="blue" stroke="blue" points="1707.21,-725.84 1717.43,-723.06 1707.71,-718.86 1707.21,-725.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node176"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="1493.5,-610 1294.5,-610 1294.5,-574 1493.5,-574 1493.5,-610"/>
<text text-anchor="middle" x="1394" y="-588.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1493.54,-582.74C1534.36,-578.3 1582.1,-572.34 1625,-565 1653.12,-560.19 1684.59,-553 1708.17,-547.26"/>
<polygon fill="blue" stroke="blue" points="1709.21,-550.6 1718.08,-544.81 1707.53,-543.81 1709.21,-550.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1493.52,-602.47C1537.9,-602.04 1588.42,-593.77 1625,-565 1645.12,-549.18 1626.11,-528.27 1645,-511 1661.84,-495.61 1686.58,-488.85 1707.17,-485.94"/>
<polygon fill="blue" stroke="blue" points="1707.67,-489.41 1717.2,-484.78 1706.86,-482.46 1707.67,-489.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1493.73,-578.31C1539.39,-577.69 1590.91,-586 1625,-619 1667.95,-660.58 1605.25,-707.36 1645,-752 1658.89,-767.59 1680.78,-774.58 1700.5,-777.57"/>
<polygon fill="blue" stroke="blue" points="1700.21,-781.06 1710.56,-778.79 1701.05,-774.11 1700.21,-781.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1493.72,-580.23C1538.54,-580.27 1589.37,-588.59 1625,-619 1649.94,-640.28 1622.57,-666.09 1645,-690 1661.15,-707.21 1686.27,-715.97 1707.22,-720.41"/>
<polygon fill="blue" stroke="blue" points="1706.64,-723.87 1717.12,-722.27 1707.93,-716.99 1706.64,-723.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node177"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="1462.5,-664 1325.5,-664 1325.5,-628 1462.5,-628 1462.5,-664"/>
<text text-anchor="middle" x="1394" y="-642.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1462.55,-633.8C1514.14,-628.69 1583.25,-631.59 1625,-673 1650.29,-698.08 1635.59,-797.65 1645,-832 1665.89,-908.21 1707.48,-992.01 1729.7,-1033.94"/>
<polygon fill="blue" stroke="blue" points="1726.72,-1035.78 1734.52,-1042.95 1732.89,-1032.48 1726.72,-1035.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1462.65,-633.02C1514.82,-627.31 1584.67,-629.8 1625,-673 1656.5,-706.75 1616.08,-1052.02 1645,-1088 1660,-1106.67 1686.51,-1113.2 1708.39,-1115.18"/>
<polygon fill="blue" stroke="blue" points="1708.17,-1118.67 1718.37,-1115.81 1708.61,-1111.68 1708.17,-1118.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1462.5,-635.15C1513.2,-631.01 1581.17,-634.57 1625,-673 1652.23,-696.88 1619.61,-726.17 1645,-752 1659.53,-766.78 1681.28,-773.72 1700.74,-776.88"/>
<polygon fill="blue" stroke="blue" points="1700.28,-780.35 1710.66,-778.21 1701.21,-773.41 1700.28,-780.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1462.6,-643.77C1509.9,-644.6 1573.58,-650.61 1625,-673 1635.7,-677.66 1634.88,-684.19 1645,-690 1664.47,-701.18 1688.12,-709.68 1707.47,-715.51"/>
<polygon fill="blue" stroke="blue" points="1706.58,-718.89 1717.16,-718.31 1708.52,-712.17 1706.58,-718.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node178"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="569.5,-52 302.5,-52 302.5,-16 569.5,-16 569.5,-52"/>
<text text-anchor="middle" x="436" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.63,-24.65C627.92,-27.96 692.44,-43.04 734,-87 784.75,-140.68 702.24,-199.3 754,-252 794.38,-293.11 866.38,-291.55 910.25,-285.85"/>
<polygon fill="blue" stroke="blue" points="910.82,-289.3 920.23,-284.41 909.83,-282.37 910.82,-289.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.85,-42.72C769.36,-56.08 1124.31,-81.02 1135,-90 1172.97,-121.89 1125.62,-165.42 1163,-198 1216.9,-244.99 1306.92,-239.72 1356.85,-232.12"/>
<polygon fill="blue" stroke="blue" points="1357.57,-235.55 1366.87,-230.49 1356.44,-228.65 1357.57,-235.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.81,-23.5C711.68,-15.71 942.18,-12.97 1135,-57 1216.8,-75.68 1304.67,-120.42 1353.85,-147.97"/>
<polygon fill="blue" stroke="blue" points="1352.14,-151.03 1362.57,-152.9 1355.59,-144.93 1352.14,-151.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M569.84,-24.08C628.36,-27.23 693,-42.34 734,-87 767.05,-123 720.28,-270.63 754,-306 792,-345.85 859.63,-346.02 904.02,-340.8"/>
<polygon fill="blue" stroke="blue" points="904.49,-344.27 913.95,-339.5 903.58,-337.33 904.49,-344.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node179"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="629,-727 243,-727 243,-691 629,-691 629,-727"/>
<text text-anchor="middle" x="436" y="-705.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M629.29,-705.45C669.23,-714.14 707.25,-731.12 734,-762 777.46,-812.17 709.6,-1309.67 754,-1359 783.45,-1391.72 832.78,-1398.21 874.26,-1396.64"/>
<polygon fill="blue" stroke="blue" points="874.55,-1400.13 884.35,-1396.1 874.17,-1393.14 874.55,-1400.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M629.22,-705.52C669.16,-714.2 707.2,-731.16 734,-762 773.61,-807.57 713.54,-1260.19 754,-1305 791.43,-1346.45 860.77,-1345.75 905.48,-1339.97"/>
<polygon fill="blue" stroke="blue" points="906.05,-1343.43 915.46,-1338.55 905.06,-1336.5 906.05,-1343.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node180"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="577.5,-619 294.5,-619 294.5,-583 577.5,-583 577.5,-619"/>
<text text-anchor="middle" x="436" y="-597.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M577.51,-603.2C690.98,-604.98 842.64,-607.36 911.17,-608.43"/>
<polygon fill="blue" stroke="blue" points="911.38,-611.93 921.44,-608.59 911.49,-604.94 911.38,-611.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M577.51,-588.34C687.7,-578.41 833.91,-565.23 905.03,-558.83"/>
<polygon fill="blue" stroke="blue" points="905.73,-562.28 915.38,-557.89 905.1,-555.31 905.73,-562.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M556.12,-582.99C615.48,-580.63 684.88,-588.7 734,-628 756.61,-646.09 731.83,-671.38 754,-690 795.51,-724.87 860.61,-726.72 903.66,-723.2"/>
<polygon fill="blue" stroke="blue" points="904.21,-726.66 913.84,-722.23 903.55,-719.69 904.21,-726.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M577.74,-605.42C627.61,-609.19 683.78,-615.95 734,-628 743.31,-630.23 744.75,-633.54 754,-636 807.3,-650.16 870.95,-657.22 910.3,-660.49"/>
<polygon fill="blue" stroke="blue" points="910.24,-664 920.49,-661.3 910.8,-657.02 910.24,-664"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.22,-582.96C580.72,-571.5 679.29,-568.41 734,-628 769.64,-666.82 719.61,-4382.08 754,-4422 786.42,-4459.63 844.87,-4464.08 889.07,-4460.96"/>
<polygon fill="blue" stroke="blue" points="889.46,-4464.44 899.13,-4460.11 888.87,-4457.47 889.46,-4464.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node181"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="514,-673 358,-673 358,-637 514,-637 514,-673"/>
<text text-anchor="middle" x="436" y="-651.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M514.06,-637.01C582.14,-626.17 678.92,-624 734,-682 773.2,-723.28 716.12,-1151.5 754,-1194 792.64,-1237.35 865.86,-1236.21 910.31,-1230.65"/>
<polygon fill="blue" stroke="blue" points="910.99,-1234.08 920.42,-1229.24 910.03,-1227.15 910.99,-1234.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M514.12,-636.96C582.23,-626.09 679.03,-623.89 734,-682 777.47,-727.96 711.64,-1204.01 754,-1251 790.98,-1292.02 859.19,-1291.78 903.95,-1286.18"/>
<polygon fill="blue" stroke="blue" points="904.53,-1289.63 913.96,-1284.79 903.57,-1282.7 904.53,-1289.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M513.53,-637C581.73,-625.98 679.01,-623.55 734,-682 785.56,-736.81 703.77,-1302.96 754,-1359 783.39,-1391.78 832.72,-1398.26 874.21,-1396.69"/>
<polygon fill="blue" stroke="blue" points="874.51,-1400.17 884.3,-1396.14 874.13,-1393.19 874.51,-1400.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M513.83,-636.98C581.99,-626.03 679.03,-623.71 734,-682 781.52,-732.39 707.7,-1253.49 754,-1305 791.34,-1346.54 860.71,-1345.81 905.45,-1340"/>
<polygon fill="blue" stroke="blue" points="906.03,-1343.46 915.43,-1338.57 905.03,-1336.53 906.03,-1343.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.22,-636.96C580.72,-625.5 679.29,-622.41 734,-682 769.13,-720.26 720.09,-4382.65 754,-4422 786.42,-4459.63 844.87,-4464.08 889.07,-4460.96"/>
<polygon fill="blue" stroke="blue" points="889.46,-4464.44 899.13,-4460.11 888.87,-4457.47 889.46,-4464.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node182"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="628,-565 244,-565 244,-529 628,-529 628,-565"/>
<text text-anchor="middle" x="436" y="-543.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M628.07,-556.14C663.58,-560.15 700.14,-565.87 734,-574 743.31,-576.23 744.75,-579.54 754,-582 807.75,-596.27 872.03,-603.34 911.3,-606.58"/>
<polygon fill="blue" stroke="blue" points="911.2,-610.08 921.44,-607.37 911.74,-603.1 911.2,-610.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M628.18,-550C729.12,-551.58 844.35,-553.38 905,-554.33"/>
<polygon fill="blue" stroke="blue" points="905.27,-557.84 915.32,-554.5 905.37,-550.84 905.27,-557.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node183"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="564.5,-3645 307.5,-3645 307.5,-3609 564.5,-3609 564.5,-3645"/>
<text text-anchor="middle" x="436" y="-3623.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M564.5,-3627C651.31,-3627 764.67,-3627 845.49,-3627"/>
<polygon fill="blue" stroke="blue" points="845.68,-3630.5 855.68,-3627 845.68,-3623.5 845.68,-3630.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M564.65,-3637.61C617.15,-3642.24 678.54,-3647.97 734,-3654 796.32,-3660.77 868.66,-3670.26 911.11,-3676"/>
<polygon fill="blue" stroke="blue" points="910.86,-3679.5 921.24,-3677.38 911.8,-3672.56 910.86,-3679.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node184"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="537.5,-3699 334.5,-3699 334.5,-3663 537.5,-3663 537.5,-3699"/>
<text text-anchor="middle" x="436" y="-3677.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.78,-3672.72C595.31,-3667.78 668.76,-3661.09 734,-3654 770.43,-3650.04 810.27,-3645.15 845.58,-3640.63"/>
<polygon fill="blue" stroke="blue" points="846.42,-3644.05 855.89,-3639.3 845.53,-3637.11 846.42,-3644.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.55,-3681C652.41,-3681 834.36,-3681 911.27,-3681"/>
<polygon fill="blue" stroke="blue" points="911.41,-3684.5 921.41,-3681 911.41,-3677.5 911.41,-3684.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node185"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="507,-3591 365,-3591 365,-3555 507,-3555 507,-3591"/>
<text text-anchor="middle" x="436" y="-3569.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M507.18,-3573C612.99,-3573 810.56,-3573 900.61,-3573"/>
<polygon fill="blue" stroke="blue" points="900.79,-3576.5 910.79,-3573 900.79,-3569.5 900.79,-3576.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M507.17,-3559.02C570.98,-3543.72 665.38,-3514.39 734,-3464 745.75,-3455.37 741.4,-3445.33 754,-3438 781,-3422.29 813.61,-3414.39 844.31,-3410.72"/>
<polygon fill="blue" stroke="blue" points="845.06,-3414.16 854.64,-3409.62 844.32,-3407.19 845.06,-3414.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M507.28,-3578.69C567.5,-3583.73 656.53,-3591.58 734,-3600 770.43,-3603.96 810.27,-3608.85 845.58,-3613.37"/>
<polygon fill="blue" stroke="blue" points="845.53,-3616.89 855.89,-3614.7 846.42,-3609.95 845.53,-3616.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M507.18,-3565.58C616.86,-3553.97 825.14,-3531.94 910.05,-3522.96"/>
<polygon fill="blue" stroke="blue" points="910.68,-3526.41 920.25,-3521.88 909.94,-3519.45 910.68,-3526.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M507.25,-3559.78C572.68,-3551.62 669.56,-3550.67 734,-3600 754.32,-3615.56 734.06,-3637.96 754,-3654 798.71,-3689.96 868.82,-3690.19 911.25,-3686.2"/>
<polygon fill="blue" stroke="blue" points="911.83,-3689.66 921.4,-3685.12 911.09,-3682.7 911.83,-3689.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node186"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="555.5,-2766 316.5,-2766 316.5,-2730 555.5,-2730 555.5,-2766"/>
<text text-anchor="middle" x="436" y="-2744.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.48,-2729.97C580.92,-2718.6 679.23,-2715.64 734,-2775 770.81,-2814.89 718.16,-4688.23 754,-4729 780.42,-4759.05 823.57,-4767.14 862.43,-4767.13"/>
<polygon fill="blue" stroke="blue" points="862.8,-4770.62 872.73,-4766.94 862.67,-4763.62 862.8,-4770.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M512.47,-2729.97C580.92,-2718.6 679.22,-2715.65 734,-2775 769.74,-2813.73 719.5,-4632.17 754,-4672 780.92,-4703.09 825.61,-4711.49 865.26,-4711.71"/>
<polygon fill="blue" stroke="blue" points="865.52,-4715.21 875.48,-4711.59 865.44,-4708.21 865.52,-4715.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.43,-2766.04C587.39,-2775.57 680.95,-2775.36 734,-2718 767.35,-2681.94 721.34,-1870.69 754,-1834 766.96,-1819.44 783.86,-1810.05 802.27,-1804.26"/>
<polygon fill="blue" stroke="blue" points="803.33,-1807.6 812.03,-1801.54 801.45,-1800.85 803.33,-1807.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.69,-2766.02C587.58,-2775.45 680.9,-2775.13 734,-2718 788.64,-2659.22 700.49,-2055.81 754,-1996 763.1,-1985.83 774.12,-1978.19 786.24,-1972.53"/>
<polygon fill="blue" stroke="blue" points="787.82,-1975.67 795.7,-1968.59 785.12,-1969.2 787.82,-1975.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.41,-2766.02C587.36,-2775.53 680.91,-2775.32 734,-2718 765.34,-2684.16 723.31,-1922.43 754,-1888 765.31,-1875.32 779.6,-1866.56 795.28,-1860.69"/>
<polygon fill="blue" stroke="blue" points="796.82,-1863.86 805.21,-1857.39 794.61,-1857.22 796.82,-1863.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.72,-2766.05C587.63,-2775.5 680.95,-2775.18 734,-2718 792.66,-2654.77 696.55,-2006.33 754,-1942 754.53,-1941.41 755.07,-1940.82 755.61,-1940.25"/>
<polygon fill="blue" stroke="blue" points="758.16,-1942.65 763,-1933.23 753.34,-1937.57 758.16,-1942.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.11,-2766.01C587.11,-2775.59 680.9,-2775.49 734,-2718 769.37,-2679.71 719.37,-1818.95 754,-1780 759.63,-1773.67 765.99,-1768.32 772.91,-1763.82"/>
<polygon fill="blue" stroke="blue" points="775.06,-1766.62 781.94,-1758.56 771.54,-1760.57 775.06,-1766.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().</title>
<g id="a_node187"><a xlink:title="fn test_lizard() { &#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(&amp;zkgroup::common::constants::TEST_ARRAY_16); &#160;&#160;&#160;&#160;let data_out = p.lizard_decode::&lt;Sha256&gt;(); &#160;&#160;&#160;&#160;assert_hex_eq!(data_out.unwrap()...">
<polygon fill="white" stroke="black" points="479.5,-2820 392.5,-2820 392.5,-2784 479.5,-2784 479.5,-2820"/>
<text text-anchor="middle" x="436" y="-2798.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M462.58,-2820.14C523.62,-2865.19 676.93,-2989.18 734,-3136 747.78,-3171.45 727.35,-4477.87 754,-4505 762.14,-4513.28 1461.35,-4530.36 1679.95,-4535.5"/>
<polygon fill="blue" stroke="blue" points="1679.91,-4539 1689.99,-4535.74 1680.07,-4532.01 1679.91,-4539"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node188"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="471.5,-2600 400.5,-2600 400.5,-2564 471.5,-2564 471.5,-2600"/>
<text text-anchor="middle" x="436" y="-2578.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M471.65,-2591.63C534.36,-2606.7 666.44,-2627.21 734,-2555 765.47,-2521.36 723.34,-1760.39 754,-1726 777.11,-1700.08 812.69,-1690.57 847.07,-1688.5"/>
<polygon fill="blue" stroke="blue" points="847.35,-1691.99 857.2,-1688.09 847.07,-1684.99 847.35,-1691.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M471.66,-2591.64C534.39,-2606.73 666.49,-2627.26 734,-2555 767.5,-2519.14 721.37,-1708.65 754,-1672 775.72,-1647.61 808.47,-1637.74 840.89,-1634.93"/>
<polygon fill="blue" stroke="blue" points="841.18,-1638.42 850.93,-1634.28 840.72,-1631.43 841.18,-1638.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M471.67,-2591.65C534.42,-2606.75 666.54,-2627.31 734,-2555 769.52,-2516.93 719.4,-1656.91 754,-1618 765.77,-1604.76 780.8,-1595.79 797.27,-1589.92"/>
<polygon fill="blue" stroke="blue" points="798.63,-1593.16 807.11,-1586.8 796.52,-1586.48 798.63,-1593.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M471.68,-2591.65C534.44,-2606.77 666.58,-2627.35 734,-2555 771.54,-2514.71 717.44,-1605.17 754,-1564 766.26,-1550.2 782.05,-1541.04 799.32,-1535.18"/>
<polygon fill="blue" stroke="blue" points="800.48,-1538.49 809.05,-1532.26 798.46,-1531.79 800.48,-1538.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node189"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="522,-2546 350,-2546 350,-2510 522,-2510 522,-2546"/>
<text text-anchor="middle" x="436" y="-2524.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.12,-2546.03C587.14,-2555.62 680.94,-2555.52 734,-2498 771.34,-2457.53 714.67,-1545.54 754,-1507 788.56,-1473.13 1589.82,-1473.77 1625,-1507 1653.32,-1533.75 1620.46,-1826.75 1645,-1857 1660.02,-1875.52 1686.35,-1882.07 1708.15,-1884.1"/>
<polygon fill="blue" stroke="blue" points="1708.21,-1887.62 1718.42,-1884.77 1708.67,-1880.63 1708.21,-1887.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.13,-2546.03C587.15,-2555.63 680.95,-2555.53 734,-2498 772.42,-2456.33 713.53,-1517.68 754,-1478 813.75,-1419.41 1588.81,-1480.18 1625,-1507 1721.5,-1578.51 1740.13,-1736.68 1743.69,-1801.47"/>
<polygon fill="blue" stroke="blue" points="1740.2,-1801.92 1744.16,-1811.74 1747.2,-1801.59 1740.2,-1801.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M522.18,-2545.89C589.45,-2554.57 680.61,-2553.25 734,-2498 780.43,-2449.96 707.49,-2245.97 754,-2198 881.14,-2066.87 980.92,-2172.42 1163,-2158 1214.27,-2153.94 1586.56,-2164.16 1625,-2130 1662.47,-2096.7 1611.12,-2055.95 1645,-2019 1660.7,-2001.88 1686.05,-1995.18 1707.23,-1992.73"/>
<polygon fill="blue" stroke="blue" points="1707.58,-1996.22 1717.23,-1991.85 1706.96,-1989.24 1707.58,-1996.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M522.27,-2545.4C589.15,-2553.65 679.7,-2551.98 734,-2498 763.64,-2468.54 726.95,-2342.86 754,-2311 876.05,-2167.23 977.21,-2230.38 1163,-2198 1268.7,-2179.58 1597.95,-2161.5 1708.15,-2155.82"/>
<polygon fill="blue" stroke="blue" points="1708.61,-2159.31 1718.41,-2155.3 1708.25,-2152.31 1708.61,-2159.31"/>
</g>
</g>
</svg>
