digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "mod.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/straus_multiscalar_mul()." [label="straus_multiscalar_mul", tooltip="pub fn straus_multiscalar_mul<I, J>(scalars: I, points: J) -> EdwardsPoint where     I: IntoIterator,     I::Item: core::borrow::Borrow<Scalar>,     J: IntoIterator,     J::Item: core::borrow::Borrow<...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "straus.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul()." [label="multiscalar_mul", tooltip="    fn multiscalar_mul<I, J>(scalars: I, points: J) -> EdwardsPoint     where         I: IntoIterator,         I::Item: Borrow<Scalar>,         J: IntoIterator,         J::Item: Borrow<EdwardsPoint>, ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [label="mul_by_cofactor", tooltip="    pub fn mul_by_cofactor(&self) -> EdwardsPoint {         self.mul_by_pow_2(3)     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." [label="is_small_order", tooltip="    pub fn is_small_order(&self) -> bool {         self.mul_by_cofactor().is_identity()     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul()." [label="multiscalar_mul", tooltip="    fn multiscalar_mul<I, J>(scalars: I, points: J) -> EdwardsPoint     where         I: IntoIterator,         I::Item: Borrow<Scalar>,         J: IntoIterator,         J::Item: Borrow<EdwardsPoint>, ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2()." [label="mul_by_pow_2", tooltip="    pub(crate) fn mul_by_pow_2(&self, k: u32) -> EdwardsPoint {         debug_assert!(k > 0);         let mut r: CompletedPoint;         let mut s = self.as_projective();         for _ in 0..(k - 1) {...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_3 {
    label = "ristretto.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul()." [label="multiscalar_mul", tooltip="    fn multiscalar_mul<I, J>(scalars: I, points: J) -> RistrettoPoint     where         I: IntoIterator,         I::Item: Borrow<Scalar>,         J: IntoIterator,         J::Item: Borrow<RistrettoPoin...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_4 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." [label="benches", tooltip="criterion_group!(benches, bench_verify_search); criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [label="bench_verify_search", tooltip="fn bench_verify_search(c: &mut Criterion) {     let sig_key = VerifyingKey::from_bytes(&hex!(         ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'      ))     .unwrap();     let...", fillcolor=white, style="filled"]
  }
  subgraph cluster_5 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [label="verify_search_internal", tooltip="fn verify_search_internal(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     monitor: bool,     now: SystemTime, ) -> Result<SearchSta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [label="evaluate_vrf_proof", tooltip="fn evaluate_vrf_proof(     proof: &[u8],     vrf_key: &vrf::PublicKey,     search_key: &[u8], ) -> Result<[u8; 32]> {     let proof = proof.try_into().map_err(|_| MalformedProof)?;     Ok(vrf_key.proo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." [label="can_verify_search_response", tooltip="    fn can_verify_search_response() {         let sig_key = VerifyingKey::from_bytes(&hex!(             ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'          ))         .unwrap(...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." [label="test_encode_to_curve_try_and_increment", tooltip="    fn test_encode_to_curve_try_and_increment() {         for v in TEST_VECTORS {             let got = encode_to_curve_try_and_increment(&v.pk, v.alpha)                 .compress()                 .0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [label="proof_to_hash", tooltip="fn proof_to_hash(gamma: &EdwardsPoint) -> [u8; 32] {     let mut hasher = Sha512::new();     hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]);     hasher.update(gamma.mul_by_cofactor().compress().0);...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." [label="test_proof_to_hash", tooltip="    fn test_proof_to_hash() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();             let index = pk.proof_to_hash(v.alpha, &v.pi).unwrap();             as...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [label="encode_to_curve_try_and_increment", tooltip="fn encode_to_curve_try_and_increment(salt: &[u8], data: &[u8]) -> EdwardsPoint {     let mut hasher = Sha512::new();      for i in 0u8..=u8::MAX {         hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [label="try_from", tooltip="    fn try_from(public_key: [u8; 32]) -> Result<Self> {         match CompressedEdwardsY(public_key).decompress() {             None => Err(Error::InvalidCurvePoint),             Some(pt) if pt.is_sma...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." [label="try_and_increment_terminates", tooltip="    fn try_and_increment_terminates() {         proptest!(|(data: [u8; 34])| {             let _ = encode_to_curve_try_and_increment(&data[..32], &data[32..]);         })     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." [label="test_proof_to_hash_fails", tooltip="    fn test_proof_to_hash_fails() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();              assert!(pk.proof_to_hash(b' a' , &v.pi).is_err());            ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "env.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." [label="from", tooltip="    fn from(src: KeyTransConfig) -> Self {         let KeyTransConfig {             signing_key_material,             vrf_key_material,             auditor_key_material,         } = src;         let s...", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "statement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction()." [label="homomorphism_with_subtraction", tooltip="    fn homomorphism_with_subtraction(         &self,         g1: &[Scalar],         all_points: &[RistrettoPoint],         challenge: Option<Scalar>,     ) -> G2 {         self.equations             ....", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [label="issue", tooltip="    pub fn issue(         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         private_key: &ServerDerivedKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> EndorsementR...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul()." [color=blue]
  "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/straus_multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2()." [color=gray, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/straus_multiscalar_mul()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
}
