digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery()." [label="to_montgomery", tooltip="    pub fn to_montgomery(&self) -> MontgomeryPoint {         // We have u = (1+y)/(1-y) = (Z+Y)/(Z-Y).         //         // The denominator is zero only when y=1, the identity point of         // the...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/decompress/step_1()." [label="step_1", tooltip="    pub(super) fn step_1(         repr: &CompressedEdwardsY,     ) -> (Choice, FieldElement, FieldElement, FieldElement) {         let Y = FieldElement::from_bytes(repr.as_bytes());         let Z = Fi...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [label="decompress", tooltip="    pub fn decompress(&self) -> Option<EdwardsPoint> {         let (is_valid_y_coord, X, Y, Z) = decompress::step_1(self);          if is_valid_y_coord.into() {             Some(decompress::step_2(sel...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [label="compress", tooltip="    pub fn compress(&self) -> CompressedEdwardsY {         let recip = self.Z.invert();         let x = &self.X * &recip;         let y = &self.Y * &recip;         let mut s: [u8; 32];          s = y....", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "field.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501()." [label="pow22501", tooltip="    fn pow22501(&self) -> (FieldElement, FieldElement) {         // Instead of managing which temporary variables are used         // for what, we define as many as we need and leave stack         // ...", fillcolor=green, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert()." [label="invert", tooltip="    pub(crate) fn invert(&self) -> FieldElement {         // The bits of p-2 = 2^255 -19 -2 are 11010111111...11.         //         //                                 nonzero bits of exponent        ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." [label="invsqrt", tooltip="    pub(crate) fn invsqrt(&self) -> (Choice, FieldElement) {         FieldElement::sqrt_ratio_i(&FieldElement::ONE, self)     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58()." [label="pow_p58", tooltip="    fn pow_p58(&self) -> FieldElement {         // The bits of (p-5)/8 are 101111.....11.         //         //                                 nonzero bits of exponent         let (t19, _) = self.pow...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [label="sqrt_ratio_i", tooltip="    pub(crate) fn sqrt_ratio_i(u: &FieldElement, v: &FieldElement) -> (Choice, FieldElement) {         // Using the same trick as in ed25519 decoding, we merge the         // inversion, the square roo...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "lizard_ristretto.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." [label="from_uniform_bytes_single_elligator", tooltip="    pub fn from_uniform_bytes_single_elligator(bytes: &[u8; 32]) -> RistrettoPoint {         RistrettoPoint::elligator_ristretto_flavor(&FieldElement::from_bytes(bytes))     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." [label="lizard_encode", tooltip="    pub fn lizard_encode<D: Digest>(data: &[u8; 16]) -> RistrettoPoint     where         D: Digest<OutputSize = U32>,     {         let mut fe_bytes: [u8; 32] = Default::default();          let digest...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_3 {
    label = "montgomery.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." [label="to_edwards", tooltip="    pub fn to_edwards(&self, sign: u8) -> Option<EdwardsPoint> {         // To decompress the Montgomery u coordinate to an         // `EdwardsPoint`, we apply the birational map to obtain the        ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_4 {
    label = "ristretto.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [label="from_uniform_bytes", tooltip="    pub fn from_uniform_bytes(bytes: &[u8; 64]) -> RistrettoPoint {         // This follows the one-way map construction from the Ristretto RFC:         // https://datatracker.ietf.org/doc/html/draft-...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [label="elligator_ristretto_flavor", tooltip="    pub(crate) fn elligator_ristretto_flavor(r_0: &FieldElement) -> RistrettoPoint {         let i = &constants::SQRT_M1;         let d = &constants::EDWARDS_D;         let one_minus_d_sq = &constants...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [label="compress", tooltip="    pub fn compress(&self) -> CompressedRistretto {         let mut X = self.0.X;         let mut Y = self.0.Y;         let Z = &self.0.Z;         let T = &self.0.T;          let u1 = &(Z + &Y) * &(Z ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_5 {
    label = "ed_to_xed.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 main()." [label="main", tooltip="fn main() {     let mut input = vec![];     std::io::stdin()         .read_to_end(&mut input)         .expect(' can read input' );     let key = boring::pkey::PKey::public_key_from_pem(&input).expect(...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [label="calculate_signature_for_multipart_message", tooltip="    pub fn calculate_signature_for_multipart_message<R: CryptoRng + Rng>(         &self,         message: &[&[u8]],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         match self....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." [label="test_large_signatures", tooltip="    fn test_large_signatures() -> Result<(), CurveError> {         let mut csprng = OsRng.unwrap_err();         let key_pair = KeyPair::generate(&mut csprng);         let mut message = [0u8; 1024 * 10...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [label="verify_signature_for_multipart_message", tooltip="    pub fn verify_signature_for_multipart_message(         &self,         message: &[&[u8]],         signature: &[u8],     ) -> bool {         match &self.key {             PublicKeyData::DjbPublicKey...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R: CryptoRng + Rng>(         &self,         message: &[u8],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         self.calculate_signature_for_multipa...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, message: &[u8], signature: &[u8]) -> bool {         self.verify_signature_for_multipart_message(&[message], signature)     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "curve25519.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [             0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05,             0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." [label="test_random_signatures", tooltip="    fn test_random_signatures() {         let mut csprng = OsRng.unwrap_err();         for _ in 0..50 {             let mut message = [0u8; 64];             csprng.fill_bytes(&mut message);           ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R>(         &self,         csprng: &mut R,         message: &[&[u8]],     ) -> [u8; SIGNATURE_LENGTH]     where         R: CryptoRng + Rng,     {         let mut random_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [label="verify_search_internal", tooltip="fn verify_search_internal(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     monitor: bool,     now: SystemTime, ) -> Result<SearchSta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [label="evaluate_vrf_proof", tooltip="fn evaluate_vrf_proof(     proof: &[u8],     vrf_key: &vrf::PublicKey,     search_key: &[u8], ) -> Result<[u8; 32]> {     let proof = proof.try_into().map_err(|_| MalformedProof)?;     Ok(vrf_key.proo...", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." [label="test_proof_to_hash", tooltip="    fn test_proof_to_hash() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();             let index = pk.proof_to_hash(v.alpha, &v.pi).unwrap();             as...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [label="try_from", tooltip="    fn try_from(public_key: [u8; 32]) -> Result<Self> {         match CompressedEdwardsY(public_key).decompress() {             None => Err(Error::InvalidCurvePoint),             Some(pt) if pt.is_sma...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." [label="test_encode_to_curve_try_and_increment", tooltip="    fn test_encode_to_curve_try_and_increment() {         for v in TEST_VECTORS {             let got = encode_to_curve_try_and_increment(&v.pk, v.alpha)                 .compress()                 .0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [label="encode_to_curve_try_and_increment", tooltip="fn encode_to_curve_try_and_increment(salt: &[u8], data: &[u8]) -> EdwardsPoint {     let mut hasher = Sha512::new();      for i in 0u8..=u8::MAX {         hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [label="proof_to_hash", tooltip="fn proof_to_hash(gamma: &EdwardsPoint) -> [u8; 32] {     let mut hasher = Sha512::new();     hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]);     hasher.update(gamma.mul_by_cofactor().compress().0);...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." [label="test_proof_to_hash_fails", tooltip="    fn test_proof_to_hash_fails() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();              assert!(pk.proof_to_hash(b' a' , &v.pi).is_err());            ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_10 {
    label = "statement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(         &self,         proof_bytes: &[u8],         point_args: &PointArgs,         message: &[u8],     ) -> Result<(), PokshoError> {         let proof = Proof::from_slice(pro...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [label="prove", tooltip="    pub fn prove(         &self,         scalar_args: &ScalarArgs,         point_args: &PointArgs,         message: &[u8],         randomness: &[u8], // must be 32 bytes     ) -> Result<Vec<u8>, Poksh...", fillcolor=white, style="filled"]
  }
  subgraph cluster_11 {
    label = "identity_key.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [label="sign_alternate_identity", tooltip="    pub fn sign_alternate_identity<R: Rng + CryptoRng>(         &self,         other: &IdentityKey,         rng: &mut R,     ) -> Result<Box<[u8]>> {         Ok(self.private_key.calculate_signature_fo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [label="verify_alternate_identity", tooltip="    pub fn verify_alternate_identity(&self, other: &IdentityKey, signature: &[u8]) -> Result<bool> {         Ok(self.public_key.verify_signature_for_multipart_message(             &[                 A...", fillcolor=white, style="filled"]
  }
  subgraph cluster_12 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(server_ids: &'a [u64], password: &[u8], rng: &mut R) -> Self {         let blind = random_scalar(rng);         let input = password_to_uniform_input(password);      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         server_ids: &[u64],         password: &[u8],         max_tries: NonZeroU32,         rng: &mut R,     ) -> Self {         assert!(!server_ids.is_empty());   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." [label="restore1", tooltip="        fn restore1(&mut self, req_bytes: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )                 .inner         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." [label="auth_secret", tooltip="fn auth_secret(input: &[u8; 64], auth_pt: &RistrettoPoint) -> [u8; 32] {     Kdf::make(         b' Signal_SVR_MasterAuthorizationKey_20240823' ,         input,         &auth_pt.compress().to_bytes(), ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." [label="input_hash_pt", tooltip="fn input_hash_pt(input: &[u8; 64]) -> RistrettoPoint {     RistrettoPoint::from_uniform_bytes(input) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [label="restore2", tooltip="    pub fn restore2<R: Rng + CryptoRng>(         self,         responses1_bytes: &[Vec<u8>],         handshake_hashes: &[&[u8]],         rng: &mut R,     ) -> Result<Restore2<'a>, Error> {         if ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_13 {
    label = "username.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [label="proof", tooltip="    pub fn proof(&self, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {         let hash = Self::hash_from_scalars(&self.scalars);         let scalar_args = Self::make_scalar_args(&self.sca...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [label="hash", tooltip="    pub fn hash(&self) -> [u8; 32] {         *Self::hash_from_scalars(&self.scalars).compress().as_bytes()     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_14 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [label="issue", tooltip="    pub fn issue(         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         private_key: &ServerDerivedKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> EndorsementR...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [label="generate_weights_for_proof", tooltip="    fn generate_weights_for_proof(         public_key: &ServerDerivedPublicKey,         E: &[RistrettoPoint],         R: &[CompressedRistretto],     ) -> Vec<Scalar> {         debug_assert_eq!(E.len()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." [label="compress", tooltip="    pub fn compress(self) -> Endorsement<CompressedRistretto> {         Endorsement {             R: self.R.compress(),         }     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." [label="to_token_raw", tooltip="    fn to_token_raw(unblinded_endorsement: RistrettoPoint) -> Box<[u8]> {         // Skip the Sho for this, we're hashing a single point into a single bitstring. We don't         // need domain separa...", fillcolor=white, style="filled"]
  }
  subgraph cluster_15 {
    label = "sho.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." [label="get_point", tooltip="    fn get_point(&mut self) -> RistrettoPoint {         let mut point_bytes = [0u8; 64];         self.squeeze_and_ratchet_into(&mut point_bytes);         RistrettoPoint::from_uniform_bytes(&point_byte...", fillcolor=white, style="filled"]
  }
  subgraph cluster_16 {
    label = "sho.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator()." [label="get_point_single_elligator", tooltip="    pub fn get_point_single_elligator(&mut self) -> RistrettoPoint {         RistrettoPoint::from_uniform_bytes_single_elligator(             &self.internal_sho.squeeze_and_ratchet_as_array(),        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." [label="get_point", tooltip="    pub fn get_point(&mut self) -> RistrettoPoint {         RistrettoPoint::from_uniform_bytes(&self.internal_sho.squeeze_and_ratchet_as_array())     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_17 {
    label = "profile_key_struct.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." [label="new", tooltip="    pub fn new(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) -> Self {         let mut encoded_profile_key = profile_key_bytes;         encoded_profile_key[0] &= 254;         encoded_profil...", fillcolor=white, style="filled"]
  }
  subgraph cluster_18 {
    label = "uid_struct.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." [label="from_service_id", tooltip="    pub fn from_service_id(service_id: ServiceId) -> Self {         let M1 = Self::calc_M1(service_id);         let raw_uuid_bytes = service_id.raw_uuid().into_bytes();         let M2 = RistrettoPoint...", fillcolor=white, style="filled"]
  }
  subgraph cluster_19 {
    label = "integration_tests.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_lizard()." [label="test_lizard", tooltip="fn test_lizard() {     let p = RistrettoPoint::lizard_encode::<Sha256>(&zkgroup::common::constants::TEST_ARRAY_16);     let data_out = p.lizard_decode::<Sha256>();     assert_hex_eq!(data_out.unwrap()...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert()." [color=gray, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/decompress/step_1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [color=gray, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/decompress/step_1()." [color=gray, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 auth_secret()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 input_hash_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_lizard()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58()." [color=gray, style=dashed]
}
